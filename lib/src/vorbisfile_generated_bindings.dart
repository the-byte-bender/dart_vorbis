// ignore_for_file: always_specify_types, unused_element, unused_field
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to libvorbisfile
class VorbisfileBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  VorbisfileBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  VorbisfileBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void vorbis_info_init(
    ffi.Pointer<vorbis_info> vi,
  ) {
    return _vorbis_info_init(
      vi,
    );
  }

  late final _vorbis_info_initPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_info_init>>('vorbis_info_init');
  late final _vorbis_info_init =
      _vorbis_info_initPtr.asFunction<DartVorbis_info_init>(isLeaf: true);

  void vorbis_info_clear(
    ffi.Pointer<vorbis_info> vi,
  ) {
    return _vorbis_info_clear(
      vi,
    );
  }

  late final _vorbis_info_clearPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_info_clear>>('vorbis_info_clear');
  late final _vorbis_info_clear =
      _vorbis_info_clearPtr.asFunction<DartVorbis_info_clear>(isLeaf: true);

  int vorbis_info_blocksize(
    ffi.Pointer<vorbis_info> vi,
    int zo,
  ) {
    return _vorbis_info_blocksize(
      vi,
      zo,
    );
  }

  late final _vorbis_info_blocksizePtr =
      _lookup<ffi.NativeFunction<NativeVorbis_info_blocksize>>(
          'vorbis_info_blocksize');
  late final _vorbis_info_blocksize = _vorbis_info_blocksizePtr
      .asFunction<DartVorbis_info_blocksize>(isLeaf: true);

  void vorbis_comment_init(
    ffi.Pointer<vorbis_comment> vc,
  ) {
    return _vorbis_comment_init(
      vc,
    );
  }

  late final _vorbis_comment_initPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_comment_init>>(
          'vorbis_comment_init');
  late final _vorbis_comment_init =
      _vorbis_comment_initPtr.asFunction<DartVorbis_comment_init>(isLeaf: true);

  void vorbis_comment_add(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Char> comment,
  ) {
    return _vorbis_comment_add(
      vc,
      comment,
    );
  }

  late final _vorbis_comment_addPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_comment_add>>(
          'vorbis_comment_add');
  late final _vorbis_comment_add =
      _vorbis_comment_addPtr.asFunction<DartVorbis_comment_add>(isLeaf: true);

  void vorbis_comment_add_tag(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Char> contents,
  ) {
    return _vorbis_comment_add_tag(
      vc,
      tag,
      contents,
    );
  }

  late final _vorbis_comment_add_tagPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_comment_add_tag>>(
          'vorbis_comment_add_tag');
  late final _vorbis_comment_add_tag = _vorbis_comment_add_tagPtr
      .asFunction<DartVorbis_comment_add_tag>(isLeaf: true);

  ffi.Pointer<ffi.Char> vorbis_comment_query(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Char> tag,
    int count,
  ) {
    return _vorbis_comment_query(
      vc,
      tag,
      count,
    );
  }

  late final _vorbis_comment_queryPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_comment_query>>(
          'vorbis_comment_query');
  late final _vorbis_comment_query = _vorbis_comment_queryPtr
      .asFunction<DartVorbis_comment_query>(isLeaf: true);

  int vorbis_comment_query_count(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _vorbis_comment_query_count(
      vc,
      tag,
    );
  }

  late final _vorbis_comment_query_countPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_comment_query_count>>(
          'vorbis_comment_query_count');
  late final _vorbis_comment_query_count = _vorbis_comment_query_countPtr
      .asFunction<DartVorbis_comment_query_count>(isLeaf: true);

  void vorbis_comment_clear(
    ffi.Pointer<vorbis_comment> vc,
  ) {
    return _vorbis_comment_clear(
      vc,
    );
  }

  late final _vorbis_comment_clearPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_comment_clear>>(
          'vorbis_comment_clear');
  late final _vorbis_comment_clear = _vorbis_comment_clearPtr
      .asFunction<DartVorbis_comment_clear>(isLeaf: true);

  int vorbis_block_init(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_block> vb,
  ) {
    return _vorbis_block_init(
      v,
      vb,
    );
  }

  late final _vorbis_block_initPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_block_init>>('vorbis_block_init');
  late final _vorbis_block_init =
      _vorbis_block_initPtr.asFunction<DartVorbis_block_init>(isLeaf: true);

  int vorbis_block_clear(
    ffi.Pointer<vorbis_block> vb,
  ) {
    return _vorbis_block_clear(
      vb,
    );
  }

  late final _vorbis_block_clearPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_block_clear>>(
          'vorbis_block_clear');
  late final _vorbis_block_clear =
      _vorbis_block_clearPtr.asFunction<DartVorbis_block_clear>(isLeaf: true);

  void vorbis_dsp_clear(
    ffi.Pointer<vorbis_dsp_state> v,
  ) {
    return _vorbis_dsp_clear(
      v,
    );
  }

  late final _vorbis_dsp_clearPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_dsp_clear>>('vorbis_dsp_clear');
  late final _vorbis_dsp_clear =
      _vorbis_dsp_clearPtr.asFunction<DartVorbis_dsp_clear>(isLeaf: true);

  double vorbis_granule_time(
    ffi.Pointer<vorbis_dsp_state> v,
    int granulepos,
  ) {
    return _vorbis_granule_time(
      v,
      granulepos,
    );
  }

  late final _vorbis_granule_timePtr =
      _lookup<ffi.NativeFunction<NativeVorbis_granule_time>>(
          'vorbis_granule_time');
  late final _vorbis_granule_time =
      _vorbis_granule_timePtr.asFunction<DartVorbis_granule_time>(isLeaf: true);

  ffi.Pointer<ffi.Char> vorbis_version_string() {
    return _vorbis_version_string();
  }

  late final _vorbis_version_stringPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_version_string>>(
          'vorbis_version_string');
  late final _vorbis_version_string = _vorbis_version_stringPtr
      .asFunction<DartVorbis_version_string>(isLeaf: true);

  int vorbis_analysis_init(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_info> vi,
  ) {
    return _vorbis_analysis_init(
      v,
      vi,
    );
  }

  late final _vorbis_analysis_initPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_analysis_init>>(
          'vorbis_analysis_init');
  late final _vorbis_analysis_init = _vorbis_analysis_initPtr
      .asFunction<DartVorbis_analysis_init>(isLeaf: true);

  int vorbis_commentheader_out(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_commentheader_out(
      vc,
      op,
    );
  }

  late final _vorbis_commentheader_outPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_commentheader_out>>(
          'vorbis_commentheader_out');
  late final _vorbis_commentheader_out = _vorbis_commentheader_outPtr
      .asFunction<DartVorbis_commentheader_out>(isLeaf: true);

  int vorbis_analysis_headerout(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op,
    ffi.Pointer<ffi.Int> op_comm,
    ffi.Pointer<ffi.Int> op_code,
  ) {
    return _vorbis_analysis_headerout(
      v,
      vc,
      op,
      op_comm,
      op_code,
    );
  }

  late final _vorbis_analysis_headeroutPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_analysis_headerout>>(
          'vorbis_analysis_headerout');
  late final _vorbis_analysis_headerout = _vorbis_analysis_headeroutPtr
      .asFunction<DartVorbis_analysis_headerout>(isLeaf: true);

  ffi.Pointer<ffi.Pointer<ffi.Float>> vorbis_analysis_buffer(
    ffi.Pointer<vorbis_dsp_state> v,
    int vals,
  ) {
    return _vorbis_analysis_buffer(
      v,
      vals,
    );
  }

  late final _vorbis_analysis_bufferPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_analysis_buffer>>(
          'vorbis_analysis_buffer');
  late final _vorbis_analysis_buffer = _vorbis_analysis_bufferPtr
      .asFunction<DartVorbis_analysis_buffer>(isLeaf: true);

  int vorbis_analysis_wrote(
    ffi.Pointer<vorbis_dsp_state> v,
    int vals,
  ) {
    return _vorbis_analysis_wrote(
      v,
      vals,
    );
  }

  late final _vorbis_analysis_wrotePtr =
      _lookup<ffi.NativeFunction<NativeVorbis_analysis_wrote>>(
          'vorbis_analysis_wrote');
  late final _vorbis_analysis_wrote = _vorbis_analysis_wrotePtr
      .asFunction<DartVorbis_analysis_wrote>(isLeaf: true);

  int vorbis_analysis_blockout(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_block> vb,
  ) {
    return _vorbis_analysis_blockout(
      v,
      vb,
    );
  }

  late final _vorbis_analysis_blockoutPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_analysis_blockout>>(
          'vorbis_analysis_blockout');
  late final _vorbis_analysis_blockout = _vorbis_analysis_blockoutPtr
      .asFunction<DartVorbis_analysis_blockout>(isLeaf: true);

  int vorbis_analysis(
    ffi.Pointer<vorbis_block> vb,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_analysis(
      vb,
      op,
    );
  }

  late final _vorbis_analysisPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_analysis>>('vorbis_analysis');
  late final _vorbis_analysis =
      _vorbis_analysisPtr.asFunction<DartVorbis_analysis>(isLeaf: true);

  int vorbis_bitrate_addblock(
    ffi.Pointer<vorbis_block> vb,
  ) {
    return _vorbis_bitrate_addblock(
      vb,
    );
  }

  late final _vorbis_bitrate_addblockPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_bitrate_addblock>>(
          'vorbis_bitrate_addblock');
  late final _vorbis_bitrate_addblock = _vorbis_bitrate_addblockPtr
      .asFunction<DartVorbis_bitrate_addblock>(isLeaf: true);

  int vorbis_bitrate_flushpacket(
    ffi.Pointer<vorbis_dsp_state> vd,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_bitrate_flushpacket(
      vd,
      op,
    );
  }

  late final _vorbis_bitrate_flushpacketPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_bitrate_flushpacket>>(
          'vorbis_bitrate_flushpacket');
  late final _vorbis_bitrate_flushpacket = _vorbis_bitrate_flushpacketPtr
      .asFunction<DartVorbis_bitrate_flushpacket>(isLeaf: true);

  int vorbis_synthesis_idheader(
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_synthesis_idheader(
      op,
    );
  }

  late final _vorbis_synthesis_idheaderPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_idheader>>(
          'vorbis_synthesis_idheader');
  late final _vorbis_synthesis_idheader = _vorbis_synthesis_idheaderPtr
      .asFunction<DartVorbis_synthesis_idheader>(isLeaf: true);

  int vorbis_synthesis_headerin(
    ffi.Pointer<vorbis_info> vi,
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_synthesis_headerin(
      vi,
      vc,
      op,
    );
  }

  late final _vorbis_synthesis_headerinPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_headerin>>(
          'vorbis_synthesis_headerin');
  late final _vorbis_synthesis_headerin = _vorbis_synthesis_headerinPtr
      .asFunction<DartVorbis_synthesis_headerin>(isLeaf: true);

  int vorbis_synthesis_init(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_info> vi,
  ) {
    return _vorbis_synthesis_init(
      v,
      vi,
    );
  }

  late final _vorbis_synthesis_initPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_init>>(
          'vorbis_synthesis_init');
  late final _vorbis_synthesis_init = _vorbis_synthesis_initPtr
      .asFunction<DartVorbis_synthesis_init>(isLeaf: true);

  int vorbis_synthesis_restart(
    ffi.Pointer<vorbis_dsp_state> v,
  ) {
    return _vorbis_synthesis_restart(
      v,
    );
  }

  late final _vorbis_synthesis_restartPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_restart>>(
          'vorbis_synthesis_restart');
  late final _vorbis_synthesis_restart = _vorbis_synthesis_restartPtr
      .asFunction<DartVorbis_synthesis_restart>(isLeaf: true);

  int vorbis_synthesis(
    ffi.Pointer<vorbis_block> vb,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_synthesis(
      vb,
      op,
    );
  }

  late final _vorbis_synthesisPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis>>('vorbis_synthesis');
  late final _vorbis_synthesis =
      _vorbis_synthesisPtr.asFunction<DartVorbis_synthesis>(isLeaf: true);

  int vorbis_synthesis_trackonly(
    ffi.Pointer<vorbis_block> vb,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_synthesis_trackonly(
      vb,
      op,
    );
  }

  late final _vorbis_synthesis_trackonlyPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_trackonly>>(
          'vorbis_synthesis_trackonly');
  late final _vorbis_synthesis_trackonly = _vorbis_synthesis_trackonlyPtr
      .asFunction<DartVorbis_synthesis_trackonly>(isLeaf: true);

  int vorbis_synthesis_blockin(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_block> vb,
  ) {
    return _vorbis_synthesis_blockin(
      v,
      vb,
    );
  }

  late final _vorbis_synthesis_blockinPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_blockin>>(
          'vorbis_synthesis_blockin');
  late final _vorbis_synthesis_blockin = _vorbis_synthesis_blockinPtr
      .asFunction<DartVorbis_synthesis_blockin>(isLeaf: true);

  int vorbis_synthesis_pcmout(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm,
  ) {
    return _vorbis_synthesis_pcmout(
      v,
      pcm,
    );
  }

  late final _vorbis_synthesis_pcmoutPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_pcmout>>(
          'vorbis_synthesis_pcmout');
  late final _vorbis_synthesis_pcmout = _vorbis_synthesis_pcmoutPtr
      .asFunction<DartVorbis_synthesis_pcmout>(isLeaf: true);

  int vorbis_synthesis_lapout(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm,
  ) {
    return _vorbis_synthesis_lapout(
      v,
      pcm,
    );
  }

  late final _vorbis_synthesis_lapoutPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_lapout>>(
          'vorbis_synthesis_lapout');
  late final _vorbis_synthesis_lapout = _vorbis_synthesis_lapoutPtr
      .asFunction<DartVorbis_synthesis_lapout>(isLeaf: true);

  int vorbis_synthesis_read(
    ffi.Pointer<vorbis_dsp_state> v,
    int samples,
  ) {
    return _vorbis_synthesis_read(
      v,
      samples,
    );
  }

  late final _vorbis_synthesis_readPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_read>>(
          'vorbis_synthesis_read');
  late final _vorbis_synthesis_read = _vorbis_synthesis_readPtr
      .asFunction<DartVorbis_synthesis_read>(isLeaf: true);

  int vorbis_packet_blocksize(
    ffi.Pointer<vorbis_info> vi,
    ffi.Pointer<ffi.Int> op,
  ) {
    return _vorbis_packet_blocksize(
      vi,
      op,
    );
  }

  late final _vorbis_packet_blocksizePtr =
      _lookup<ffi.NativeFunction<NativeVorbis_packet_blocksize>>(
          'vorbis_packet_blocksize');
  late final _vorbis_packet_blocksize = _vorbis_packet_blocksizePtr
      .asFunction<DartVorbis_packet_blocksize>(isLeaf: true);

  int vorbis_synthesis_halfrate(
    ffi.Pointer<vorbis_info> v,
    int flag,
  ) {
    return _vorbis_synthesis_halfrate(
      v,
      flag,
    );
  }

  late final _vorbis_synthesis_halfratePtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_halfrate>>(
          'vorbis_synthesis_halfrate');
  late final _vorbis_synthesis_halfrate = _vorbis_synthesis_halfratePtr
      .asFunction<DartVorbis_synthesis_halfrate>(isLeaf: true);

  int vorbis_synthesis_halfrate_p(
    ffi.Pointer<vorbis_info> v,
  ) {
    return _vorbis_synthesis_halfrate_p(
      v,
    );
  }

  late final _vorbis_synthesis_halfrate_pPtr =
      _lookup<ffi.NativeFunction<NativeVorbis_synthesis_halfrate_p>>(
          'vorbis_synthesis_halfrate_p');
  late final _vorbis_synthesis_halfrate_p = _vorbis_synthesis_halfrate_pPtr
      .asFunction<DartVorbis_synthesis_halfrate_p>(isLeaf: true);

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<Native__va_start>>('__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<Dart__va_start>(isLeaf: true);

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<Native__security_init_cookie>>(
          '__security_init_cookie');
  late final ___security_init_cookie = ___security_init_cookiePtr
      .asFunction<Dart__security_init_cookie>(isLeaf: true);

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<Native__security_check_cookie>>(
          '__security_check_cookie');
  late final ___security_check_cookie = ___security_check_cookiePtr
      .asFunction<Dart__security_check_cookie>(isLeaf: true);

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<Native__report_gsfailure>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<Dart__report_gsfailure>(isLeaf: true);

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<Native_invalid_parameter_noinfo>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo = __invalid_parameter_noinfoPtr
      .asFunction<Dart_invalid_parameter_noinfo>(isLeaf: true);

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<Native_invalid_parameter_noinfo_noreturn>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr
          .asFunction<Dart_invalid_parameter_noinfo_noreturn>(isLeaf: true);

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr =
      _lookup<ffi.NativeFunction<Native_invoke_watson>>('_invoke_watson');
  late final __invoke_watson =
      __invoke_watsonPtr.asFunction<Dart_invoke_watson>(isLeaf: true);

  ffi.Pointer<FILE> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_funcPtr =
      _lookup<ffi.NativeFunction<Native__acrt_iob_func>>('__acrt_iob_func');
  late final ___acrt_iob_func =
      ___acrt_iob_funcPtr.asFunction<Dart__acrt_iob_func>(isLeaf: true);

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr = _lookup<ffi.NativeFunction<NativeFgetwc>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<DartFgetwc>(isLeaf: true);

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwcharPtr =
      _lookup<ffi.NativeFunction<Native_fgetwchar>>('_fgetwchar');
  late final __fgetwchar =
      __fgetwcharPtr.asFunction<Dart_fgetwchar>(isLeaf: true);

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr = _lookup<ffi.NativeFunction<NativeFputwc>>('fputwc');
  late final _fputwc = _fputwcPtr.asFunction<DartFputwc>(isLeaf: true);

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwcharPtr =
      _lookup<ffi.NativeFunction<Native_fputwchar>>('_fputwchar');
  late final __fputwchar =
      __fputwcharPtr.asFunction<Dart_fputwchar>(isLeaf: true);

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr = _lookup<ffi.NativeFunction<NativeGetwc>>('getwc');
  late final _getwc = _getwcPtr.asFunction<DartGetwc>(isLeaf: true);

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<NativeGetwchar>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<DartGetwchar>(isLeaf: true);

  ffi.Pointer<ffi.WChar> fgetws(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<ffi.NativeFunction<NativeFgetws>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<DartFgetws>(isLeaf: true);

  int fputws(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<ffi.NativeFunction<NativeFputws>>('fputws');
  late final _fputws = _fputwsPtr.asFunction<DartFputws>(isLeaf: true);

  ffi.Pointer<ffi.WChar> _getws_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_sPtr =
      _lookup<ffi.NativeFunction<Native_getws_s>>('_getws_s');
  late final __getws_s = __getws_sPtr.asFunction<Dart_getws_s>(isLeaf: true);

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr = _lookup<ffi.NativeFunction<NativePutwc>>('putwc');
  late final _putwc = _putwcPtr.asFunction<DartPutwc>(isLeaf: true);

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<NativePutwchar>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<DartPutwchar>(isLeaf: true);

  int _putws(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putwsPtr = _lookup<ffi.NativeFunction<Native_putws>>('_putws');
  late final __putws = __putwsPtr.asFunction<Dart_putws>(isLeaf: true);

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<NativeUngetwc>>('ungetwc');
  late final _ungetwc = _ungetwcPtr.asFunction<DartUngetwc>(isLeaf: true);

  ffi.Pointer<FILE> _wfdopen(
    int _FileHandle,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopenPtr =
      _lookup<ffi.NativeFunction<Native_wfdopen>>('_wfdopen');
  late final __wfdopen = __wfdopenPtr.asFunction<Dart_wfdopen>(isLeaf: true);

  ffi.Pointer<FILE> _wfopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopenPtr =
      _lookup<ffi.NativeFunction<Native_wfopen>>('_wfopen');
  late final __wfopen = __wfopenPtr.asFunction<Dart_wfopen>(isLeaf: true);

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_sPtr =
      _lookup<ffi.NativeFunction<Native_wfopen_s>>('_wfopen_s');
  late final __wfopen_s = __wfopen_sPtr.asFunction<Dart_wfopen_s>(isLeaf: true);

  ffi.Pointer<FILE> _wfreopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopenPtr =
      _lookup<ffi.NativeFunction<Native_wfreopen>>('_wfreopen');
  late final __wfreopen = __wfreopenPtr.asFunction<Dart_wfreopen>(isLeaf: true);

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_sPtr =
      _lookup<ffi.NativeFunction<Native_wfreopen_s>>('_wfreopen_s');
  late final __wfreopen_s =
      __wfreopen_sPtr.asFunction<Dart_wfreopen_s>(isLeaf: true);

  ffi.Pointer<FILE> _wfsopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopenPtr =
      _lookup<ffi.NativeFunction<Native_wfsopen>>('_wfsopen');
  late final __wfsopen = __wfsopenPtr.asFunction<Dart_wfsopen>(isLeaf: true);

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<Native_wperror>>('_wperror');
  late final __wperror = __wperrorPtr.asFunction<Dart_wperror>(isLeaf: true);

  ffi.Pointer<FILE> _wpopen(
    ffi.Pointer<ffi.WChar> _Command,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopenPtr =
      _lookup<ffi.NativeFunction<Native_wpopen>>('_wpopen');
  late final __wpopen = __wpopenPtr.asFunction<Dart_wpopen>(isLeaf: true);

  int _wremove(
    ffi.Pointer<ffi.WChar> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremovePtr =
      _lookup<ffi.NativeFunction<Native_wremove>>('_wremove');
  late final __wremove = __wremovePtr.asFunction<Dart_wremove>(isLeaf: true);

  ffi.Pointer<ffi.WChar> _wtempnam(
    ffi.Pointer<ffi.WChar> _Directory,
    ffi.Pointer<ffi.WChar> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnamPtr =
      _lookup<ffi.NativeFunction<Native_wtempnam>>('_wtempnam');
  late final __wtempnam = __wtempnamPtr.asFunction<Dart_wtempnam>(isLeaf: true);

  int _wtmpnam_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_sPtr =
      _lookup<ffi.NativeFunction<Native_wtmpnam_s>>('_wtmpnam_s');
  late final __wtmpnam_s =
      __wtmpnam_sPtr.asFunction<Dart_wtmpnam_s>(isLeaf: true);

  ffi.Pointer<ffi.WChar> _wtmpnam(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnamPtr =
      _lookup<ffi.NativeFunction<Native_wtmpnam>>('_wtmpnam');
  late final __wtmpnam = __wtmpnamPtr.asFunction<Dart_wtmpnam>(isLeaf: true);

  int _fgetwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fgetwc_nolock>>('_fgetwc_nolock');
  late final __fgetwc_nolock =
      __fgetwc_nolockPtr.asFunction<Dart_fgetwc_nolock>(isLeaf: true);

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fputwc_nolock>>('_fputwc_nolock');
  late final __fputwc_nolock =
      __fputwc_nolockPtr.asFunction<Dart_fputwc_nolock>(isLeaf: true);

  int _getwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_getwc_nolock>>('_getwc_nolock');
  late final __getwc_nolock =
      __getwc_nolockPtr.asFunction<Dart_getwc_nolock>(isLeaf: true);

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_putwc_nolock>>('_putwc_nolock');
  late final __putwc_nolock =
      __putwc_nolockPtr.asFunction<Dart_putwc_nolock>(isLeaf: true);

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_ungetwc_nolock>>('_ungetwc_nolock');
  late final __ungetwc_nolock =
      __ungetwc_nolockPtr.asFunction<Dart_ungetwc_nolock>(isLeaf: true);

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfwprintf>>(
          '__stdio_common_vfwprintf');
  late final ___stdio_common_vfwprintf = ___stdio_common_vfwprintfPtr
      .asFunction<Dart__stdio_common_vfwprintf>(isLeaf: true);

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_sPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfwprintf_s>>(
          '__stdio_common_vfwprintf_s');
  late final ___stdio_common_vfwprintf_s = ___stdio_common_vfwprintf_sPtr
      .asFunction<Dart__stdio_common_vfwprintf_s>(isLeaf: true);

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_pPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfwprintf_p>>(
          '__stdio_common_vfwprintf_p');
  late final ___stdio_common_vfwprintf_p = ___stdio_common_vfwprintf_pPtr
      .asFunction<Dart__stdio_common_vfwprintf_p>(isLeaf: true);

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfwscanf>>(
          '__stdio_common_vfwscanf');
  late final ___stdio_common_vfwscanf = ___stdio_common_vfwscanfPtr
      .asFunction<Dart__stdio_common_vfwscanf>(isLeaf: true);

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vswprintf>>(
          '__stdio_common_vswprintf');
  late final ___stdio_common_vswprintf = ___stdio_common_vswprintfPtr
      .asFunction<Dart__stdio_common_vswprintf>(isLeaf: true);

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_sPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vswprintf_s>>(
          '__stdio_common_vswprintf_s');
  late final ___stdio_common_vswprintf_s = ___stdio_common_vswprintf_sPtr
      .asFunction<Dart__stdio_common_vswprintf_s>(isLeaf: true);

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_sPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vsnwprintf_s>>(
          '__stdio_common_vsnwprintf_s');
  late final ___stdio_common_vsnwprintf_s = ___stdio_common_vsnwprintf_sPtr
      .asFunction<Dart__stdio_common_vsnwprintf_s>(isLeaf: true);

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_pPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vswprintf_p>>(
          '__stdio_common_vswprintf_p');
  late final ___stdio_common_vswprintf_p = ___stdio_common_vswprintf_pPtr
      .asFunction<Dart__stdio_common_vswprintf_p>(isLeaf: true);

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vswscanf>>(
          '__stdio_common_vswscanf');
  late final ___stdio_common_vswscanf = ___stdio_common_vswscanfPtr
      .asFunction<Dart__stdio_common_vswscanf>(isLeaf: true);

  int _get_stream_buffer_pointers(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int>> _Count,
  ) {
    return __get_stream_buffer_pointers(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final __get_stream_buffer_pointersPtr =
      _lookup<ffi.NativeFunction<Native_get_stream_buffer_pointers>>(
          '_get_stream_buffer_pointers');
  late final __get_stream_buffer_pointers = __get_stream_buffer_pointersPtr
      .asFunction<Dart_get_stream_buffer_pointers>(isLeaf: true);

  int clearerr_s(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_sPtr =
      _lookup<ffi.NativeFunction<NativeClearerr_s>>('clearerr_s');
  late final _clearerr_s =
      _clearerr_sPtr.asFunction<DartClearerr_s>(isLeaf: true);

  int fopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_sPtr =
      _lookup<ffi.NativeFunction<NativeFopen_s>>('fopen_s');
  late final _fopen_s = _fopen_sPtr.asFunction<DartFopen_s>(isLeaf: true);

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_sPtr =
      _lookup<ffi.NativeFunction<NativeFread_s>>('fread_s');
  late final _fread_s = _fread_sPtr.asFunction<DartFread_s>(isLeaf: true);

  int freopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_sPtr =
      _lookup<ffi.NativeFunction<NativeFreopen_s>>('freopen_s');
  late final _freopen_s = _freopen_sPtr.asFunction<DartFreopen_s>(isLeaf: true);

  ffi.Pointer<ffi.Char> gets_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_sPtr = _lookup<ffi.NativeFunction<NativeGets_s>>('gets_s');
  late final _gets_s = _gets_sPtr.asFunction<DartGets_s>(isLeaf: true);

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_sPtr =
      _lookup<ffi.NativeFunction<NativeTmpfile_s>>('tmpfile_s');
  late final _tmpfile_s = _tmpfile_sPtr.asFunction<DartTmpfile_s>(isLeaf: true);

  int tmpnam_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_sPtr =
      _lookup<ffi.NativeFunction<NativeTmpnam_s>>('tmpnam_s');
  late final _tmpnam_s = _tmpnam_sPtr.asFunction<DartTmpnam_s>(isLeaf: true);

  void clearerr(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<NativeClearerr>>('clearerr');
  late final _clearerr = _clearerrPtr.asFunction<DartClearerr>(isLeaf: true);

  int fclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclosePtr = _lookup<ffi.NativeFunction<NativeFclose>>('fclose');
  late final _fclose = _fclosePtr.asFunction<DartFclose>(isLeaf: true);

  int _fcloseall() {
    return __fcloseall();
  }

  late final __fcloseallPtr =
      _lookup<ffi.NativeFunction<Native_fcloseall>>('_fcloseall');
  late final __fcloseall =
      __fcloseallPtr.asFunction<Dart_fcloseall>(isLeaf: true);

  ffi.Pointer<FILE> _fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __fdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __fdopenPtr =
      _lookup<ffi.NativeFunction<Native_fdopen>>('_fdopen');
  late final __fdopen = __fdopenPtr.asFunction<Dart_fdopen>(isLeaf: true);

  int feof(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feofPtr = _lookup<ffi.NativeFunction<NativeFeof>>('feof');
  late final _feof = _feofPtr.asFunction<DartFeof>(isLeaf: true);

  int ferror(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferrorPtr = _lookup<ffi.NativeFunction<NativeFerror>>('ferror');
  late final _ferror = _ferrorPtr.asFunction<DartFerror>(isLeaf: true);

  int fflush(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflushPtr = _lookup<ffi.NativeFunction<NativeFflush>>('fflush');
  late final _fflush = _fflushPtr.asFunction<DartFflush>(isLeaf: true);

  int fgetc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetcPtr = _lookup<ffi.NativeFunction<NativeFgetc>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<DartFgetc>(isLeaf: true);

  int _fgetchar() {
    return __fgetchar();
  }

  late final __fgetcharPtr =
      _lookup<ffi.NativeFunction<Native_fgetchar>>('_fgetchar');
  late final __fgetchar = __fgetcharPtr.asFunction<Dart_fgetchar>(isLeaf: true);

  int fgetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetposPtr =
      _lookup<ffi.NativeFunction<NativeFgetpos>>('fgetpos');
  late final _fgetpos = _fgetposPtr.asFunction<DartFgetpos>(isLeaf: true);

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> _Buffer,
    int _MaxCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgetsPtr = _lookup<ffi.NativeFunction<NativeFgets>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<DartFgets>(isLeaf: true);

  int _fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fileno(
      _Stream,
    );
  }

  late final __filenoPtr =
      _lookup<ffi.NativeFunction<Native_fileno>>('_fileno');
  late final __fileno = __filenoPtr.asFunction<Dart_fileno>(isLeaf: true);

  int _flushall() {
    return __flushall();
  }

  late final __flushallPtr =
      _lookup<ffi.NativeFunction<Native_flushall>>('_flushall');
  late final __flushall = __flushallPtr.asFunction<Dart_flushall>(isLeaf: true);

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopenPtr = _lookup<ffi.NativeFunction<NativeFopen>>('fopen');
  late final _fopen = _fopenPtr.asFunction<DartFopen>(isLeaf: true);

  int fputc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputcPtr = _lookup<ffi.NativeFunction<NativeFputc>>('fputc');
  late final _fputc = _fputcPtr.asFunction<DartFputc>(isLeaf: true);

  int _fputchar(
    int _Character,
  ) {
    return __fputchar(
      _Character,
    );
  }

  late final __fputcharPtr =
      _lookup<ffi.NativeFunction<Native_fputchar>>('_fputchar');
  late final __fputchar = __fputcharPtr.asFunction<Dart_fputchar>(isLeaf: true);

  int fputs(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputsPtr = _lookup<ffi.NativeFunction<NativeFputs>>('fputs');
  late final _fputs = _fputsPtr.asFunction<DartFputs>(isLeaf: true);

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _freadPtr = _lookup<ffi.NativeFunction<NativeFread>>('fread');
  late final _fread = _freadPtr.asFunction<DartFread>(isLeaf: true);

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopenPtr =
      _lookup<ffi.NativeFunction<NativeFreopen>>('freopen');
  late final _freopen = _freopenPtr.asFunction<DartFreopen>(isLeaf: true);

  ffi.Pointer<FILE> _fsopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    int _ShFlag,
  ) {
    return __fsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __fsopenPtr =
      _lookup<ffi.NativeFunction<Native_fsopen>>('_fsopen');
  late final __fsopen = __fsopenPtr.asFunction<Dart_fsopen>(isLeaf: true);

  int fsetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetposPtr =
      _lookup<ffi.NativeFunction<NativeFsetpos>>('fsetpos');
  late final _fsetpos = _fsetposPtr.asFunction<DartFsetpos>(isLeaf: true);

  int fseek(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseekPtr = _lookup<ffi.NativeFunction<NativeFseek>>('fseek');
  late final _fseek = _fseekPtr.asFunction<DartFseek>(isLeaf: true);

  int _fseeki64(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64Ptr =
      _lookup<ffi.NativeFunction<Native_fseeki64>>('_fseeki64');
  late final __fseeki64 = __fseeki64Ptr.asFunction<Dart_fseeki64>(isLeaf: true);

  int ftell(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftellPtr = _lookup<ffi.NativeFunction<NativeFtell>>('ftell');
  late final _ftell = _ftellPtr.asFunction<DartFtell>(isLeaf: true);

  int _ftelli64(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64(
      _Stream,
    );
  }

  late final __ftelli64Ptr =
      _lookup<ffi.NativeFunction<Native_ftelli64>>('_ftelli64');
  late final __ftelli64 = __ftelli64Ptr.asFunction<Dart_ftelli64>(isLeaf: true);

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwritePtr = _lookup<ffi.NativeFunction<NativeFwrite>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<DartFwrite>(isLeaf: true);

  int getc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getcPtr = _lookup<ffi.NativeFunction<NativeGetc>>('getc');
  late final _getc = _getcPtr.asFunction<DartGetc>(isLeaf: true);

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<NativeGetchar>>('getchar');
  late final _getchar = _getcharPtr.asFunction<DartGetchar>(isLeaf: true);

  int _getmaxstdio() {
    return __getmaxstdio();
  }

  late final __getmaxstdioPtr =
      _lookup<ffi.NativeFunction<Native_getmaxstdio>>('_getmaxstdio');
  late final __getmaxstdio =
      __getmaxstdioPtr.asFunction<Dart_getmaxstdio>(isLeaf: true);

  int _getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getw(
      _Stream,
    );
  }

  late final __getwPtr = _lookup<ffi.NativeFunction<Native_getw>>('_getw');
  late final __getw = __getwPtr.asFunction<Dart_getw>(isLeaf: true);

  void perror(
    ffi.Pointer<ffi.Char> _ErrorMessage,
  ) {
    return _perror(
      _ErrorMessage,
    );
  }

  late final _perrorPtr = _lookup<ffi.NativeFunction<NativePerror>>('perror');
  late final _perror = _perrorPtr.asFunction<DartPerror>(isLeaf: true);

  int _pclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __pclose(
      _Stream,
    );
  }

  late final __pclosePtr =
      _lookup<ffi.NativeFunction<Native_pclose>>('_pclose');
  late final __pclose = __pclosePtr.asFunction<Dart_pclose>(isLeaf: true);

  ffi.Pointer<FILE> _popen(
    ffi.Pointer<ffi.Char> _Command,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __popen(
      _Command,
      _Mode,
    );
  }

  late final __popenPtr = _lookup<ffi.NativeFunction<Native_popen>>('_popen');
  late final __popen = __popenPtr.asFunction<Dart_popen>(isLeaf: true);

  int putc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putcPtr = _lookup<ffi.NativeFunction<NativePutc>>('putc');
  late final _putc = _putcPtr.asFunction<DartPutc>(isLeaf: true);

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<NativePutchar>>('putchar');
  late final _putchar = _putcharPtr.asFunction<DartPutchar>(isLeaf: true);

  int puts(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _putsPtr = _lookup<ffi.NativeFunction<NativePuts>>('puts');
  late final _puts = _putsPtr.asFunction<DartPuts>(isLeaf: true);

  int _putw(
    int _Word,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putw(
      _Word,
      _Stream,
    );
  }

  late final __putwPtr = _lookup<ffi.NativeFunction<Native_putw>>('_putw');
  late final __putw = __putwPtr.asFunction<Dart_putw>(isLeaf: true);

  int remove(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _removePtr = _lookup<ffi.NativeFunction<NativeRemove>>('remove');
  late final _remove = _removePtr.asFunction<DartRemove>(isLeaf: true);

  int rename(
    ffi.Pointer<ffi.Char> _OldFileName,
    ffi.Pointer<ffi.Char> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _renamePtr = _lookup<ffi.NativeFunction<NativeRename>>('rename');
  late final _rename = _renamePtr.asFunction<DartRename>(isLeaf: true);

  int _unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return __unlink(
      _FileName,
    );
  }

  late final __unlinkPtr =
      _lookup<ffi.NativeFunction<Native_unlink>>('_unlink');
  late final __unlink = __unlinkPtr.asFunction<Dart_unlink>(isLeaf: true);

  int unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _unlink1(
      _FileName,
    );
  }

  late final _unlinkPtr = _lookup<ffi.NativeFunction<NativeUnlink>>('unlink');
  late final _unlink1 = _unlinkPtr.asFunction<DartUnlink>(isLeaf: true);

  void rewind(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewindPtr = _lookup<ffi.NativeFunction<NativeRewind>>('rewind');
  late final _rewind = _rewindPtr.asFunction<DartRewind>(isLeaf: true);

  int _rmtmp() {
    return __rmtmp();
  }

  late final __rmtmpPtr = _lookup<ffi.NativeFunction<Native_rmtmp>>('_rmtmp');
  late final __rmtmp = __rmtmpPtr.asFunction<Dart_rmtmp>(isLeaf: true);

  void setbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbufPtr = _lookup<ffi.NativeFunction<NativeSetbuf>>('setbuf');
  late final _setbuf = _setbufPtr.asFunction<DartSetbuf>(isLeaf: true);

  int _setmaxstdio(
    int _Maximum,
  ) {
    return __setmaxstdio(
      _Maximum,
    );
  }

  late final __setmaxstdioPtr =
      _lookup<ffi.NativeFunction<Native_setmaxstdio>>('_setmaxstdio');
  late final __setmaxstdio =
      __setmaxstdioPtr.asFunction<Dart_setmaxstdio>(isLeaf: true);

  int setvbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbufPtr =
      _lookup<ffi.NativeFunction<NativeSetvbuf>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<DartSetvbuf>(isLeaf: true);

  ffi.Pointer<ffi.Char> _tempnam(
    ffi.Pointer<ffi.Char> _DirectoryName,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return __tempnam(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final __tempnamPtr =
      _lookup<ffi.NativeFunction<Native_tempnam>>('_tempnam');
  late final __tempnam = __tempnamPtr.asFunction<Dart_tempnam>(isLeaf: true);

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<NativeTmpfile>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<DartTmpfile>(isLeaf: true);

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnamPtr = _lookup<ffi.NativeFunction<NativeTmpnam>>('tmpnam');
  late final _tmpnam = _tmpnamPtr.asFunction<DartTmpnam>(isLeaf: true);

  int ungetc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetcPtr = _lookup<ffi.NativeFunction<NativeUngetc>>('ungetc');
  late final _ungetc = _ungetcPtr.asFunction<DartUngetc>(isLeaf: true);

  void _lock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __lock_file(
      _Stream,
    );
  }

  late final __lock_filePtr =
      _lookup<ffi.NativeFunction<Native_lock_file>>('_lock_file');
  late final __lock_file =
      __lock_filePtr.asFunction<Dart_lock_file>(isLeaf: true);

  void _unlock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __unlock_file(
      _Stream,
    );
  }

  late final __unlock_filePtr =
      _lookup<ffi.NativeFunction<Native_unlock_file>>('_unlock_file');
  late final __unlock_file =
      __unlock_filePtr.asFunction<Dart_unlock_file>(isLeaf: true);

  int _fclose_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fclose_nolock(
      _Stream,
    );
  }

  late final __fclose_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fclose_nolock>>('_fclose_nolock');
  late final __fclose_nolock =
      __fclose_nolockPtr.asFunction<Dart_fclose_nolock>(isLeaf: true);

  int _fflush_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fflush_nolock(
      _Stream,
    );
  }

  late final __fflush_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fflush_nolock>>('_fflush_nolock');
  late final __fflush_nolock =
      __fflush_nolockPtr.asFunction<Dart_fflush_nolock>(isLeaf: true);

  int _fgetc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetc_nolock(
      _Stream,
    );
  }

  late final __fgetc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fgetc_nolock>>('_fgetc_nolock');
  late final __fgetc_nolock =
      __fgetc_nolockPtr.asFunction<Dart_fgetc_nolock>(isLeaf: true);

  int _fputc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fputc_nolock>>('_fputc_nolock');
  late final __fputc_nolock =
      __fputc_nolockPtr.asFunction<Dart_fputc_nolock>(isLeaf: true);

  int _fread_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fread_nolock>>('_fread_nolock');
  late final __fread_nolock =
      __fread_nolockPtr.asFunction<Dart_fread_nolock>(isLeaf: true);

  int _fread_nolock_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_sPtr =
      _lookup<ffi.NativeFunction<Native_fread_nolock_s>>('_fread_nolock_s');
  late final __fread_nolock_s =
      __fread_nolock_sPtr.asFunction<Dart_fread_nolock_s>(isLeaf: true);

  int _fseek_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseek_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseek_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fseek_nolock>>('_fseek_nolock');
  late final __fseek_nolock =
      __fseek_nolockPtr.asFunction<Dart_fseek_nolock>(isLeaf: true);

  int _fseeki64_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fseeki64_nolock>>('_fseeki64_nolock');
  late final __fseeki64_nolock =
      __fseeki64_nolockPtr.asFunction<Dart_fseeki64_nolock>(isLeaf: true);

  int _ftell_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftell_nolock(
      _Stream,
    );
  }

  late final __ftell_nolockPtr =
      _lookup<ffi.NativeFunction<Native_ftell_nolock>>('_ftell_nolock');
  late final __ftell_nolock =
      __ftell_nolockPtr.asFunction<Dart_ftell_nolock>(isLeaf: true);

  int _ftelli64_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64_nolock(
      _Stream,
    );
  }

  late final __ftelli64_nolockPtr =
      _lookup<ffi.NativeFunction<Native_ftelli64_nolock>>('_ftelli64_nolock');
  late final __ftelli64_nolock =
      __ftelli64_nolockPtr.asFunction<Dart_ftelli64_nolock>(isLeaf: true);

  int _fwrite_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fwrite_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fwrite_nolockPtr =
      _lookup<ffi.NativeFunction<Native_fwrite_nolock>>('_fwrite_nolock');
  late final __fwrite_nolock =
      __fwrite_nolockPtr.asFunction<Dart_fwrite_nolock>(isLeaf: true);

  int _getc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getc_nolock(
      _Stream,
    );
  }

  late final __getc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_getc_nolock>>('_getc_nolock');
  late final __getc_nolock =
      __getc_nolockPtr.asFunction<Dart_getc_nolock>(isLeaf: true);

  int _putc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_putc_nolock>>('_putc_nolock');
  late final __putc_nolock =
      __putc_nolockPtr.asFunction<Dart_putc_nolock>(isLeaf: true);

  int _ungetc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetc_nolockPtr =
      _lookup<ffi.NativeFunction<Native_ungetc_nolock>>('_ungetc_nolock');
  late final __ungetc_nolock =
      __ungetc_nolockPtr.asFunction<Dart_ungetc_nolock>(isLeaf: true);

  ffi.Pointer<ffi.Int> __p__commode() {
    return ___p__commode();
  }

  late final ___p__commodePtr =
      _lookup<ffi.NativeFunction<Native__p__commode>>('__p__commode');
  late final ___p__commode =
      ___p__commodePtr.asFunction<Dart__p__commode>(isLeaf: true);

  int __stdio_common_vfprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfprintf>>(
          '__stdio_common_vfprintf');
  late final ___stdio_common_vfprintf = ___stdio_common_vfprintfPtr
      .asFunction<Dart__stdio_common_vfprintf>(isLeaf: true);

  int __stdio_common_vfprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_sPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfprintf_s>>(
          '__stdio_common_vfprintf_s');
  late final ___stdio_common_vfprintf_s = ___stdio_common_vfprintf_sPtr
      .asFunction<Dart__stdio_common_vfprintf_s>(isLeaf: true);

  int __stdio_common_vfprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_pPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfprintf_p>>(
          '__stdio_common_vfprintf_p');
  late final ___stdio_common_vfprintf_p = ___stdio_common_vfprintf_pPtr
      .asFunction<Dart__stdio_common_vfprintf_p>(isLeaf: true);

  int _set_printf_count_output(
    int _Value,
  ) {
    return __set_printf_count_output(
      _Value,
    );
  }

  late final __set_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<Native_set_printf_count_output>>(
          '_set_printf_count_output');
  late final __set_printf_count_output = __set_printf_count_outputPtr
      .asFunction<Dart_set_printf_count_output>(isLeaf: true);

  int _get_printf_count_output() {
    return __get_printf_count_output();
  }

  late final __get_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<Native_get_printf_count_output>>(
          '_get_printf_count_output');
  late final __get_printf_count_output = __get_printf_count_outputPtr
      .asFunction<Dart_get_printf_count_output>(isLeaf: true);

  int __stdio_common_vfscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _Arglist,
  ) {
    return ___stdio_common_vfscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final ___stdio_common_vfscanfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vfscanf>>(
          '__stdio_common_vfscanf');
  late final ___stdio_common_vfscanf = ___stdio_common_vfscanfPtr
      .asFunction<Dart__stdio_common_vfscanf>(isLeaf: true);

  int __stdio_common_vsprintf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vsprintf>>(
          '__stdio_common_vsprintf');
  late final ___stdio_common_vsprintf = ___stdio_common_vsprintfPtr
      .asFunction<Dart__stdio_common_vsprintf>(isLeaf: true);

  int __stdio_common_vsprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_sPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vsprintf_s>>(
          '__stdio_common_vsprintf_s');
  late final ___stdio_common_vsprintf_s = ___stdio_common_vsprintf_sPtr
      .asFunction<Dart__stdio_common_vsprintf_s>(isLeaf: true);

  int __stdio_common_vsnprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnprintf_sPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vsnprintf_s>>(
          '__stdio_common_vsnprintf_s');
  late final ___stdio_common_vsnprintf_s = ___stdio_common_vsnprintf_sPtr
      .asFunction<Dart__stdio_common_vsnprintf_s>(isLeaf: true);

  int __stdio_common_vsprintf_p(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_pPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vsprintf_p>>(
          '__stdio_common_vsprintf_p');
  late final ___stdio_common_vsprintf_p = ___stdio_common_vsprintf_pPtr
      .asFunction<Dart__stdio_common_vsprintf_p>(isLeaf: true);

  int __stdio_common_vsscanf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsscanfPtr =
      _lookup<ffi.NativeFunction<Native__stdio_common_vsscanf>>(
          '__stdio_common_vsscanf');
  late final ___stdio_common_vsscanf = ___stdio_common_vsscanfPtr
      .asFunction<Dart__stdio_common_vsscanf>(isLeaf: true);

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> _Directory,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return _tempnam1(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnamPtr =
      _lookup<ffi.NativeFunction<NativeTempnam>>('tempnam');
  late final _tempnam1 = _tempnamPtr.asFunction<DartTempnam>(isLeaf: true);

  int fcloseall() {
    return _fcloseall1();
  }

  late final _fcloseallPtr =
      _lookup<ffi.NativeFunction<NativeFcloseall>>('fcloseall');
  late final _fcloseall1 =
      _fcloseallPtr.asFunction<DartFcloseall>(isLeaf: true);

  ffi.Pointer<FILE> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Format,
  ) {
    return _fdopen1(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopenPtr = _lookup<ffi.NativeFunction<NativeFdopen>>('fdopen');
  late final _fdopen1 = _fdopenPtr.asFunction<DartFdopen>(isLeaf: true);

  int fgetchar() {
    return _fgetchar1();
  }

  late final _fgetcharPtr =
      _lookup<ffi.NativeFunction<NativeFgetchar>>('fgetchar');
  late final _fgetchar1 = _fgetcharPtr.asFunction<DartFgetchar>(isLeaf: true);

  int fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno1(
      _Stream,
    );
  }

  late final _filenoPtr = _lookup<ffi.NativeFunction<NativeFileno>>('fileno');
  late final _fileno1 = _filenoPtr.asFunction<DartFileno>(isLeaf: true);

  int flushall() {
    return _flushall1();
  }

  late final _flushallPtr =
      _lookup<ffi.NativeFunction<NativeFlushall>>('flushall');
  late final _flushall1 = _flushallPtr.asFunction<DartFlushall>(isLeaf: true);

  int fputchar(
    int _Ch,
  ) {
    return _fputchar1(
      _Ch,
    );
  }

  late final _fputcharPtr =
      _lookup<ffi.NativeFunction<NativeFputchar>>('fputchar');
  late final _fputchar1 = _fputcharPtr.asFunction<DartFputchar>(isLeaf: true);

  int getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw1(
      _Stream,
    );
  }

  late final _getwPtr = _lookup<ffi.NativeFunction<NativeGetw>>('getw');
  late final _getw1 = _getwPtr.asFunction<DartGetw>(isLeaf: true);

  int putw(
    int _Ch,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw1(
      _Ch,
      _Stream,
    );
  }

  late final _putwPtr = _lookup<ffi.NativeFunction<NativePutw>>('putw');
  late final _putw1 = _putwPtr.asFunction<DartPutw>(isLeaf: true);

  int rmtmp() {
    return _rmtmp1();
  }

  late final _rmtmpPtr = _lookup<ffi.NativeFunction<NativeRmtmp>>('rmtmp');
  late final _rmtmp1 = _rmtmpPtr.asFunction<DartRmtmp>(isLeaf: true);

  int _ov_header_fseek_wrap(
    ffi.Pointer<FILE> f,
    int off,
    int whence,
  ) {
    return __ov_header_fseek_wrap(
      f,
      off,
      whence,
    );
  }

  late final __ov_header_fseek_wrapPtr =
      _lookup<ffi.NativeFunction<Native_ov_header_fseek_wrap>>(
          '_ov_header_fseek_wrap');
  late final __ov_header_fseek_wrap = __ov_header_fseek_wrapPtr
      .asFunction<Dart_ov_header_fseek_wrap>(isLeaf: true);

  late final ffi.Pointer<ov_callbacks> _OV_CALLBACKS_DEFAULT =
      _lookup<ov_callbacks>('OV_CALLBACKS_DEFAULT');

  ov_callbacks get OV_CALLBACKS_DEFAULT => _OV_CALLBACKS_DEFAULT.ref;

  late final ffi.Pointer<ov_callbacks> _OV_CALLBACKS_NOCLOSE =
      _lookup<ov_callbacks>('OV_CALLBACKS_NOCLOSE');

  ov_callbacks get OV_CALLBACKS_NOCLOSE => _OV_CALLBACKS_NOCLOSE.ref;

  late final ffi.Pointer<ov_callbacks> _OV_CALLBACKS_STREAMONLY =
      _lookup<ov_callbacks>('OV_CALLBACKS_STREAMONLY');

  ov_callbacks get OV_CALLBACKS_STREAMONLY => _OV_CALLBACKS_STREAMONLY.ref;

  late final ffi.Pointer<ov_callbacks> _OV_CALLBACKS_STREAMONLY_NOCLOSE =
      _lookup<ov_callbacks>('OV_CALLBACKS_STREAMONLY_NOCLOSE');

  ov_callbacks get OV_CALLBACKS_STREAMONLY_NOCLOSE =>
      _OV_CALLBACKS_STREAMONLY_NOCLOSE.ref;

  int ov_clear(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_clear(
      vf,
    );
  }

  late final _ov_clearPtr =
      _lookup<ffi.NativeFunction<NativeOv_clear>>('ov_clear');
  late final _ov_clear = _ov_clearPtr.asFunction<DartOv_clear>(isLeaf: true);

  int ov_fopen(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_fopen(
      path,
      vf,
    );
  }

  late final _ov_fopenPtr =
      _lookup<ffi.NativeFunction<NativeOv_fopen>>('ov_fopen');
  late final _ov_fopen = _ov_fopenPtr.asFunction<DartOv_fopen>(isLeaf: true);

  int ov_open(
    ffi.Pointer<FILE> f,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    int ibytes,
  ) {
    return _ov_open(
      f,
      vf,
      initial,
      ibytes,
    );
  }

  late final _ov_openPtr =
      _lookup<ffi.NativeFunction<NativeOv_open>>('ov_open');
  late final _ov_open = _ov_openPtr.asFunction<DartOv_open>(isLeaf: true);

  int ov_open_callbacks(
    ffi.Pointer<ffi.Void> datasource,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    int ibytes,
    ov_callbacks callbacks,
  ) {
    return _ov_open_callbacks(
      datasource,
      vf,
      initial,
      ibytes,
      callbacks,
    );
  }

  late final _ov_open_callbacksPtr =
      _lookup<ffi.NativeFunction<NativeOv_open_callbacks>>('ov_open_callbacks');
  late final _ov_open_callbacks =
      _ov_open_callbacksPtr.asFunction<DartOv_open_callbacks>(isLeaf: true);

  int ov_test(
    ffi.Pointer<FILE> f,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    int ibytes,
  ) {
    return _ov_test(
      f,
      vf,
      initial,
      ibytes,
    );
  }

  late final _ov_testPtr =
      _lookup<ffi.NativeFunction<NativeOv_test>>('ov_test');
  late final _ov_test = _ov_testPtr.asFunction<DartOv_test>(isLeaf: true);

  int ov_test_callbacks(
    ffi.Pointer<ffi.Void> datasource,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    int ibytes,
    ov_callbacks callbacks,
  ) {
    return _ov_test_callbacks(
      datasource,
      vf,
      initial,
      ibytes,
      callbacks,
    );
  }

  late final _ov_test_callbacksPtr =
      _lookup<ffi.NativeFunction<NativeOv_test_callbacks>>('ov_test_callbacks');
  late final _ov_test_callbacks =
      _ov_test_callbacksPtr.asFunction<DartOv_test_callbacks>(isLeaf: true);

  int ov_test_open(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_test_open(
      vf,
    );
  }

  late final _ov_test_openPtr =
      _lookup<ffi.NativeFunction<NativeOv_test_open>>('ov_test_open');
  late final _ov_test_open =
      _ov_test_openPtr.asFunction<DartOv_test_open>(isLeaf: true);

  int ov_bitrate(
    ffi.Pointer<OggVorbis_File> vf,
    int i,
  ) {
    return _ov_bitrate(
      vf,
      i,
    );
  }

  late final _ov_bitratePtr =
      _lookup<ffi.NativeFunction<NativeOv_bitrate>>('ov_bitrate');
  late final _ov_bitrate =
      _ov_bitratePtr.asFunction<DartOv_bitrate>(isLeaf: true);

  int ov_bitrate_instant(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_bitrate_instant(
      vf,
    );
  }

  late final _ov_bitrate_instantPtr =
      _lookup<ffi.NativeFunction<NativeOv_bitrate_instant>>(
          'ov_bitrate_instant');
  late final _ov_bitrate_instant =
      _ov_bitrate_instantPtr.asFunction<DartOv_bitrate_instant>(isLeaf: true);

  int ov_streams(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_streams(
      vf,
    );
  }

  late final _ov_streamsPtr =
      _lookup<ffi.NativeFunction<NativeOv_streams>>('ov_streams');
  late final _ov_streams =
      _ov_streamsPtr.asFunction<DartOv_streams>(isLeaf: true);

  int ov_seekable(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_seekable(
      vf,
    );
  }

  late final _ov_seekablePtr =
      _lookup<ffi.NativeFunction<NativeOv_seekable>>('ov_seekable');
  late final _ov_seekable =
      _ov_seekablePtr.asFunction<DartOv_seekable>(isLeaf: true);

  int ov_serialnumber(
    ffi.Pointer<OggVorbis_File> vf,
    int i,
  ) {
    return _ov_serialnumber(
      vf,
      i,
    );
  }

  late final _ov_serialnumberPtr =
      _lookup<ffi.NativeFunction<NativeOv_serialnumber>>('ov_serialnumber');
  late final _ov_serialnumber =
      _ov_serialnumberPtr.asFunction<DartOv_serialnumber>(isLeaf: true);

  int ov_raw_total(
    ffi.Pointer<OggVorbis_File> vf,
    int i,
  ) {
    return _ov_raw_total(
      vf,
      i,
    );
  }

  late final _ov_raw_totalPtr =
      _lookup<ffi.NativeFunction<NativeOv_raw_total>>('ov_raw_total');
  late final _ov_raw_total =
      _ov_raw_totalPtr.asFunction<DartOv_raw_total>(isLeaf: true);

  int ov_pcm_total(
    ffi.Pointer<OggVorbis_File> vf,
    int i,
  ) {
    return _ov_pcm_total(
      vf,
      i,
    );
  }

  late final _ov_pcm_totalPtr =
      _lookup<ffi.NativeFunction<NativeOv_pcm_total>>('ov_pcm_total');
  late final _ov_pcm_total =
      _ov_pcm_totalPtr.asFunction<DartOv_pcm_total>(isLeaf: true);

  double ov_time_total(
    ffi.Pointer<OggVorbis_File> vf,
    int i,
  ) {
    return _ov_time_total(
      vf,
      i,
    );
  }

  late final _ov_time_totalPtr =
      _lookup<ffi.NativeFunction<NativeOv_time_total>>('ov_time_total');
  late final _ov_time_total =
      _ov_time_totalPtr.asFunction<DartOv_time_total>(isLeaf: true);

  int ov_raw_seek(
    ffi.Pointer<OggVorbis_File> vf,
    int pos,
  ) {
    return _ov_raw_seek(
      vf,
      pos,
    );
  }

  late final _ov_raw_seekPtr =
      _lookup<ffi.NativeFunction<NativeOv_raw_seek>>('ov_raw_seek');
  late final _ov_raw_seek =
      _ov_raw_seekPtr.asFunction<DartOv_raw_seek>(isLeaf: true);

  int ov_pcm_seek(
    ffi.Pointer<OggVorbis_File> vf,
    int pos,
  ) {
    return _ov_pcm_seek(
      vf,
      pos,
    );
  }

  late final _ov_pcm_seekPtr =
      _lookup<ffi.NativeFunction<NativeOv_pcm_seek>>('ov_pcm_seek');
  late final _ov_pcm_seek =
      _ov_pcm_seekPtr.asFunction<DartOv_pcm_seek>(isLeaf: true);

  int ov_pcm_seek_page(
    ffi.Pointer<OggVorbis_File> vf,
    int pos,
  ) {
    return _ov_pcm_seek_page(
      vf,
      pos,
    );
  }

  late final _ov_pcm_seek_pagePtr =
      _lookup<ffi.NativeFunction<NativeOv_pcm_seek_page>>('ov_pcm_seek_page');
  late final _ov_pcm_seek_page =
      _ov_pcm_seek_pagePtr.asFunction<DartOv_pcm_seek_page>(isLeaf: true);

  int ov_time_seek(
    ffi.Pointer<OggVorbis_File> vf,
    double pos,
  ) {
    return _ov_time_seek(
      vf,
      pos,
    );
  }

  late final _ov_time_seekPtr =
      _lookup<ffi.NativeFunction<NativeOv_time_seek>>('ov_time_seek');
  late final _ov_time_seek =
      _ov_time_seekPtr.asFunction<DartOv_time_seek>(isLeaf: true);

  int ov_time_seek_page(
    ffi.Pointer<OggVorbis_File> vf,
    double pos,
  ) {
    return _ov_time_seek_page(
      vf,
      pos,
    );
  }

  late final _ov_time_seek_pagePtr =
      _lookup<ffi.NativeFunction<NativeOv_time_seek_page>>('ov_time_seek_page');
  late final _ov_time_seek_page =
      _ov_time_seek_pagePtr.asFunction<DartOv_time_seek_page>(isLeaf: true);

  int ov_raw_seek_lap(
    ffi.Pointer<OggVorbis_File> vf,
    int pos,
  ) {
    return _ov_raw_seek_lap(
      vf,
      pos,
    );
  }

  late final _ov_raw_seek_lapPtr =
      _lookup<ffi.NativeFunction<NativeOv_raw_seek_lap>>('ov_raw_seek_lap');
  late final _ov_raw_seek_lap =
      _ov_raw_seek_lapPtr.asFunction<DartOv_raw_seek_lap>(isLeaf: true);

  int ov_pcm_seek_lap(
    ffi.Pointer<OggVorbis_File> vf,
    int pos,
  ) {
    return _ov_pcm_seek_lap(
      vf,
      pos,
    );
  }

  late final _ov_pcm_seek_lapPtr =
      _lookup<ffi.NativeFunction<NativeOv_pcm_seek_lap>>('ov_pcm_seek_lap');
  late final _ov_pcm_seek_lap =
      _ov_pcm_seek_lapPtr.asFunction<DartOv_pcm_seek_lap>(isLeaf: true);

  int ov_pcm_seek_page_lap(
    ffi.Pointer<OggVorbis_File> vf,
    int pos,
  ) {
    return _ov_pcm_seek_page_lap(
      vf,
      pos,
    );
  }

  late final _ov_pcm_seek_page_lapPtr =
      _lookup<ffi.NativeFunction<NativeOv_pcm_seek_page_lap>>(
          'ov_pcm_seek_page_lap');
  late final _ov_pcm_seek_page_lap = _ov_pcm_seek_page_lapPtr
      .asFunction<DartOv_pcm_seek_page_lap>(isLeaf: true);

  int ov_time_seek_lap(
    ffi.Pointer<OggVorbis_File> vf,
    double pos,
  ) {
    return _ov_time_seek_lap(
      vf,
      pos,
    );
  }

  late final _ov_time_seek_lapPtr =
      _lookup<ffi.NativeFunction<NativeOv_time_seek_lap>>('ov_time_seek_lap');
  late final _ov_time_seek_lap =
      _ov_time_seek_lapPtr.asFunction<DartOv_time_seek_lap>(isLeaf: true);

  int ov_time_seek_page_lap(
    ffi.Pointer<OggVorbis_File> vf,
    double pos,
  ) {
    return _ov_time_seek_page_lap(
      vf,
      pos,
    );
  }

  late final _ov_time_seek_page_lapPtr =
      _lookup<ffi.NativeFunction<NativeOv_time_seek_page_lap>>(
          'ov_time_seek_page_lap');
  late final _ov_time_seek_page_lap = _ov_time_seek_page_lapPtr
      .asFunction<DartOv_time_seek_page_lap>(isLeaf: true);

  int ov_raw_tell(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_raw_tell(
      vf,
    );
  }

  late final _ov_raw_tellPtr =
      _lookup<ffi.NativeFunction<NativeOv_raw_tell>>('ov_raw_tell');
  late final _ov_raw_tell =
      _ov_raw_tellPtr.asFunction<DartOv_raw_tell>(isLeaf: true);

  int ov_pcm_tell(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_pcm_tell(
      vf,
    );
  }

  late final _ov_pcm_tellPtr =
      _lookup<ffi.NativeFunction<NativeOv_pcm_tell>>('ov_pcm_tell');
  late final _ov_pcm_tell =
      _ov_pcm_tellPtr.asFunction<DartOv_pcm_tell>(isLeaf: true);

  double ov_time_tell(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_time_tell(
      vf,
    );
  }

  late final _ov_time_tellPtr =
      _lookup<ffi.NativeFunction<NativeOv_time_tell>>('ov_time_tell');
  late final _ov_time_tell =
      _ov_time_tellPtr.asFunction<DartOv_time_tell>(isLeaf: true);

  ffi.Pointer<vorbis_info> ov_info(
    ffi.Pointer<OggVorbis_File> vf,
    int link,
  ) {
    return _ov_info(
      vf,
      link,
    );
  }

  late final _ov_infoPtr =
      _lookup<ffi.NativeFunction<NativeOv_info>>('ov_info');
  late final _ov_info = _ov_infoPtr.asFunction<DartOv_info>(isLeaf: true);

  ffi.Pointer<vorbis_comment> ov_comment(
    ffi.Pointer<OggVorbis_File> vf,
    int link,
  ) {
    return _ov_comment(
      vf,
      link,
    );
  }

  late final _ov_commentPtr =
      _lookup<ffi.NativeFunction<NativeOv_comment>>('ov_comment');
  late final _ov_comment =
      _ov_commentPtr.asFunction<DartOv_comment>(isLeaf: true);

  int ov_read_float(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm_channels,
    int samples,
    ffi.Pointer<ffi.Int> bitstream,
  ) {
    return _ov_read_float(
      vf,
      pcm_channels,
      samples,
      bitstream,
    );
  }

  late final _ov_read_floatPtr =
      _lookup<ffi.NativeFunction<NativeOv_read_float>>('ov_read_float');
  late final _ov_read_float =
      _ov_read_floatPtr.asFunction<DartOv_read_float>(isLeaf: true);

  int ov_read_filter(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> buffer,
    int length,
    int bigendianp,
    int word,
    int sgned,
    ffi.Pointer<ffi.Int> bitstream,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Pointer<ffi.Float>> pcm,
                    ffi.Long channels,
                    ffi.Long samples,
                    ffi.Pointer<ffi.Void> filter_param)>>
        filter,
    ffi.Pointer<ffi.Void> filter_param,
  ) {
    return _ov_read_filter(
      vf,
      buffer,
      length,
      bigendianp,
      word,
      sgned,
      bitstream,
      filter,
      filter_param,
    );
  }

  late final _ov_read_filterPtr =
      _lookup<ffi.NativeFunction<NativeOv_read_filter>>('ov_read_filter');
  late final _ov_read_filter =
      _ov_read_filterPtr.asFunction<DartOv_read_filter>(isLeaf: true);

  int ov_read(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> buffer,
    int length,
    int bigendianp,
    int word,
    int sgned,
    ffi.Pointer<ffi.Int> bitstream,
  ) {
    return _ov_read(
      vf,
      buffer,
      length,
      bigendianp,
      word,
      sgned,
      bitstream,
    );
  }

  late final _ov_readPtr =
      _lookup<ffi.NativeFunction<NativeOv_read>>('ov_read');
  late final _ov_read = _ov_readPtr.asFunction<DartOv_read>(isLeaf: true);

  int ov_crosslap(
    ffi.Pointer<OggVorbis_File> vf1,
    ffi.Pointer<OggVorbis_File> vf2,
  ) {
    return _ov_crosslap(
      vf1,
      vf2,
    );
  }

  late final _ov_crosslapPtr =
      _lookup<ffi.NativeFunction<NativeOv_crosslap>>('ov_crosslap');
  late final _ov_crosslap =
      _ov_crosslapPtr.asFunction<DartOv_crosslap>(isLeaf: true);

  int ov_halfrate(
    ffi.Pointer<OggVorbis_File> vf,
    int flag,
  ) {
    return _ov_halfrate(
      vf,
      flag,
    );
  }

  late final _ov_halfratePtr =
      _lookup<ffi.NativeFunction<NativeOv_halfrate>>('ov_halfrate');
  late final _ov_halfrate =
      _ov_halfratePtr.asFunction<DartOv_halfrate>(isLeaf: true);

  int ov_halfrate_p(
    ffi.Pointer<OggVorbis_File> vf,
  ) {
    return _ov_halfrate_p(
      vf,
    );
  }

  late final _ov_halfrate_pPtr =
      _lookup<ffi.NativeFunction<NativeOv_halfrate_p>>('ov_halfrate_p');
  late final _ov_halfrate_p =
      _ov_halfrate_pPtr.asFunction<DartOv_halfrate_p>(isLeaf: true);
}

final class vorbis_info extends ffi.Struct {
  @ffi.Int()
  external int version;

  @ffi.Int()
  external int channels;

  @ffi.Long()
  external int rate;

  @ffi.Long()
  external int bitrate_upper;

  @ffi.Long()
  external int bitrate_nominal;

  @ffi.Long()
  external int bitrate_lower;

  @ffi.Long()
  external int bitrate_window;

  external ffi.Pointer<ffi.Void> codec_setup;
}

final class vorbis_dsp_state extends ffi.Struct {
  @ffi.Int()
  external int analysisp;

  external ffi.Pointer<vorbis_info> vi;

  external ffi.Pointer<ffi.Pointer<ffi.Float>> pcm;

  external ffi.Pointer<ffi.Pointer<ffi.Float>> pcmret;

  @ffi.Int()
  external int pcm_storage;

  @ffi.Int()
  external int pcm_current;

  @ffi.Int()
  external int pcm_returned;

  @ffi.Int()
  external int preextrapolate;

  @ffi.Int()
  external int eofflag;

  @ffi.Long()
  external int lW;

  @ffi.Long()
  external int W;

  @ffi.Long()
  external int nW;

  @ffi.Long()
  external int centerW;

  @ffi.Int()
  external int granulepos;

  @ffi.Int()
  external int sequence;

  @ffi.Int()
  external int glue_bits;

  @ffi.Int()
  external int time_bits;

  @ffi.Int()
  external int floor_bits;

  @ffi.Int()
  external int res_bits;

  external ffi.Pointer<ffi.Void> backend_state;
}

final class vorbis_block extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Float>> pcm;

  @ffi.Int()
  external int opb;

  @ffi.Long()
  external int lW;

  @ffi.Long()
  external int W;

  @ffi.Long()
  external int nW;

  @ffi.Int()
  external int pcmend;

  @ffi.Int()
  external int mode;

  @ffi.Int()
  external int eofflag;

  @ffi.Int()
  external int granulepos;

  @ffi.Int()
  external int sequence;

  external ffi.Pointer<vorbis_dsp_state> vd;

  external ffi.Pointer<ffi.Void> localstore;

  @ffi.Long()
  external int localtop;

  @ffi.Long()
  external int localalloc;

  @ffi.Long()
  external int totaluse;

  external ffi.Pointer<alloc_chain> reap;

  @ffi.Long()
  external int glue_bits;

  @ffi.Long()
  external int time_bits;

  @ffi.Long()
  external int floor_bits;

  @ffi.Long()
  external int res_bits;

  external ffi.Pointer<ffi.Void> internal;
}

final class alloc_chain extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;

  external ffi.Pointer<alloc_chain> next;
}

final class vorbis_comment extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> user_comments;

  external ffi.Pointer<ffi.Int> comment_lengths;

  @ffi.Int()
  external int comments;

  external ffi.Pointer<ffi.Char> vendor;
}

typedef NativeVorbis_info_init = ffi.Void Function(ffi.Pointer<vorbis_info> vi);
typedef DartVorbis_info_init = void Function(ffi.Pointer<vorbis_info> vi);
typedef NativeVorbis_info_clear = ffi.Void Function(
    ffi.Pointer<vorbis_info> vi);
typedef DartVorbis_info_clear = void Function(ffi.Pointer<vorbis_info> vi);
typedef NativeVorbis_info_blocksize = ffi.Int Function(
    ffi.Pointer<vorbis_info> vi, ffi.Int zo);
typedef DartVorbis_info_blocksize = int Function(
    ffi.Pointer<vorbis_info> vi, int zo);
typedef NativeVorbis_comment_init = ffi.Void Function(
    ffi.Pointer<vorbis_comment> vc);
typedef DartVorbis_comment_init = void Function(ffi.Pointer<vorbis_comment> vc);
typedef NativeVorbis_comment_add = ffi.Void Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Char> comment);
typedef DartVorbis_comment_add = void Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Char> comment);
typedef NativeVorbis_comment_add_tag = ffi.Void Function(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Char> contents);
typedef DartVorbis_comment_add_tag = void Function(
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Char> contents);
typedef NativeVorbis_comment_query = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Char> tag, ffi.Int count);
typedef DartVorbis_comment_query = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Char> tag, int count);
typedef NativeVorbis_comment_query_count = ffi.Int Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Char> tag);
typedef DartVorbis_comment_query_count = int Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Char> tag);
typedef NativeVorbis_comment_clear = ffi.Void Function(
    ffi.Pointer<vorbis_comment> vc);
typedef DartVorbis_comment_clear = void Function(
    ffi.Pointer<vorbis_comment> vc);
typedef NativeVorbis_block_init = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_block> vb);
typedef DartVorbis_block_init = int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_block> vb);
typedef NativeVorbis_block_clear = ffi.Int Function(
    ffi.Pointer<vorbis_block> vb);
typedef DartVorbis_block_clear = int Function(ffi.Pointer<vorbis_block> vb);
typedef NativeVorbis_dsp_clear = ffi.Void Function(
    ffi.Pointer<vorbis_dsp_state> v);
typedef DartVorbis_dsp_clear = void Function(ffi.Pointer<vorbis_dsp_state> v);
typedef NativeVorbis_granule_time = ffi.Double Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Int granulepos);
typedef DartVorbis_granule_time = double Function(
    ffi.Pointer<vorbis_dsp_state> v, int granulepos);
typedef NativeVorbis_version_string = ffi.Pointer<ffi.Char> Function();
typedef DartVorbis_version_string = ffi.Pointer<ffi.Char> Function();
typedef NativeVorbis_analysis_init = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_info> vi);
typedef DartVorbis_analysis_init = int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_info> vi);
typedef NativeVorbis_commentheader_out = ffi.Int Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Int> op);
typedef DartVorbis_commentheader_out = int Function(
    ffi.Pointer<vorbis_comment> vc, ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_analysis_headerout = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op,
    ffi.Pointer<ffi.Int> op_comm,
    ffi.Pointer<ffi.Int> op_code);
typedef DartVorbis_analysis_headerout = int Function(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op,
    ffi.Pointer<ffi.Int> op_comm,
    ffi.Pointer<ffi.Int> op_code);
typedef NativeVorbis_analysis_buffer = ffi.Pointer<ffi.Pointer<ffi.Float>>
    Function(ffi.Pointer<vorbis_dsp_state> v, ffi.Int vals);
typedef DartVorbis_analysis_buffer = ffi.Pointer<ffi.Pointer<ffi.Float>>
    Function(ffi.Pointer<vorbis_dsp_state> v, int vals);
typedef NativeVorbis_analysis_wrote = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Int vals);
typedef DartVorbis_analysis_wrote = int Function(
    ffi.Pointer<vorbis_dsp_state> v, int vals);
typedef NativeVorbis_analysis_blockout = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_block> vb);
typedef DartVorbis_analysis_blockout = int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_block> vb);
typedef NativeVorbis_analysis = ffi.Int Function(
    ffi.Pointer<vorbis_block> vb, ffi.Pointer<ffi.Int> op);
typedef DartVorbis_analysis = int Function(
    ffi.Pointer<vorbis_block> vb, ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_bitrate_addblock = ffi.Int Function(
    ffi.Pointer<vorbis_block> vb);
typedef DartVorbis_bitrate_addblock = int Function(
    ffi.Pointer<vorbis_block> vb);
typedef NativeVorbis_bitrate_flushpacket = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> vd, ffi.Pointer<ffi.Int> op);
typedef DartVorbis_bitrate_flushpacket = int Function(
    ffi.Pointer<vorbis_dsp_state> vd, ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_synthesis_idheader = ffi.Int Function(
    ffi.Pointer<ffi.Int> op);
typedef DartVorbis_synthesis_idheader = int Function(ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_synthesis_headerin = ffi.Int Function(
    ffi.Pointer<vorbis_info> vi,
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op);
typedef DartVorbis_synthesis_headerin = int Function(
    ffi.Pointer<vorbis_info> vi,
    ffi.Pointer<vorbis_comment> vc,
    ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_synthesis_init = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_info> vi);
typedef DartVorbis_synthesis_init = int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_info> vi);
typedef NativeVorbis_synthesis_restart = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v);
typedef DartVorbis_synthesis_restart = int Function(
    ffi.Pointer<vorbis_dsp_state> v);
typedef NativeVorbis_synthesis = ffi.Int Function(
    ffi.Pointer<vorbis_block> vb, ffi.Pointer<ffi.Int> op);
typedef DartVorbis_synthesis = int Function(
    ffi.Pointer<vorbis_block> vb, ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_synthesis_trackonly = ffi.Int Function(
    ffi.Pointer<vorbis_block> vb, ffi.Pointer<ffi.Int> op);
typedef DartVorbis_synthesis_trackonly = int Function(
    ffi.Pointer<vorbis_block> vb, ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_synthesis_blockin = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_block> vb);
typedef DartVorbis_synthesis_blockin = int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Pointer<vorbis_block> vb);
typedef NativeVorbis_synthesis_pcmout = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm);
typedef DartVorbis_synthesis_pcmout = int Function(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm);
typedef NativeVorbis_synthesis_lapout = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm);
typedef DartVorbis_synthesis_lapout = int Function(
    ffi.Pointer<vorbis_dsp_state> v,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm);
typedef NativeVorbis_synthesis_read = ffi.Int Function(
    ffi.Pointer<vorbis_dsp_state> v, ffi.Int samples);
typedef DartVorbis_synthesis_read = int Function(
    ffi.Pointer<vorbis_dsp_state> v, int samples);
typedef NativeVorbis_packet_blocksize = ffi.Long Function(
    ffi.Pointer<vorbis_info> vi, ffi.Pointer<ffi.Int> op);
typedef DartVorbis_packet_blocksize = int Function(
    ffi.Pointer<vorbis_info> vi, ffi.Pointer<ffi.Int> op);
typedef NativeVorbis_synthesis_halfrate = ffi.Int Function(
    ffi.Pointer<vorbis_info> v, ffi.Int flag);
typedef DartVorbis_synthesis_halfrate = int Function(
    ffi.Pointer<vorbis_info> v, int flag);
typedef NativeVorbis_synthesis_halfrate_p = ffi.Int Function(
    ffi.Pointer<vorbis_info> v);
typedef DartVorbis_synthesis_halfrate_p = int Function(
    ffi.Pointer<vorbis_info> v);
typedef va_list = ffi.Pointer<ffi.Char>;
typedef Native__va_start = ffi.Void Function(ffi.Pointer<va_list> arg0);
typedef Dart__va_start = void Function(ffi.Pointer<va_list> arg0);
typedef Native__security_init_cookie = ffi.Void Function();
typedef Dart__security_init_cookie = void Function();
typedef Native__security_check_cookie = ffi.Void Function(
    ffi.UintPtr _StackCookie);
typedef Dart__security_check_cookie = void Function(int _StackCookie);
typedef Native__report_gsfailure = ffi.Void Function(ffi.UintPtr _StackCookie);
typedef Dart__report_gsfailure = void Function(int _StackCookie);
typedef Native_invalid_parameter_noinfo = ffi.Void Function();
typedef Dart_invalid_parameter_noinfo = void Function();
typedef Native_invalid_parameter_noinfo_noreturn = ffi.Void Function();
typedef Dart_invalid_parameter_noinfo_noreturn = void Function();
typedef Native_invoke_watson = ffi.Void Function(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.UnsignedInt _LineNo,
    ffi.UintPtr _Reserved);
typedef Dart_invoke_watson = void Function(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved);

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

final class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;
typedef Native__acrt_iob_func = ffi.Pointer<FILE> Function(ffi.UnsignedInt _Ix);
typedef Dart__acrt_iob_func = ffi.Pointer<FILE> Function(int _Ix);
typedef wint_t = ffi.UnsignedShort;
typedef Dartwint_t = int;
typedef NativeFgetwc = wint_t Function(ffi.Pointer<FILE> _Stream);
typedef DartFgetwc = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fgetwchar = wint_t Function();
typedef Dart_fgetwchar = int Function();
typedef NativeFputwc = wint_t Function(
    ffi.WChar _Character, ffi.Pointer<FILE> _Stream);
typedef DartFputwc = int Function(int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_fputwchar = wint_t Function(ffi.WChar _Character);
typedef Dart_fputwchar = int Function(int _Character);
typedef NativeGetwc = wint_t Function(ffi.Pointer<FILE> _Stream);
typedef DartGetwc = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeGetwchar = wint_t Function();
typedef DartGetwchar = int Function();
typedef NativeFgetws = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Int _BufferCount,
    ffi.Pointer<FILE> _Stream);
typedef DartFgetws = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream);
typedef NativeFputws = ffi.Int Function(
    ffi.Pointer<ffi.WChar> _Buffer, ffi.Pointer<FILE> _Stream);
typedef DartFputws = int Function(
    ffi.Pointer<ffi.WChar> _Buffer, ffi.Pointer<FILE> _Stream);
typedef Native_getws_s = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Buffer, ffi.Size _BufferCount);
typedef Dart_getws_s = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Buffer, int _BufferCount);
typedef NativePutwc = wint_t Function(
    ffi.WChar _Character, ffi.Pointer<FILE> _Stream);
typedef DartPutwc = int Function(int _Character, ffi.Pointer<FILE> _Stream);
typedef NativePutwchar = wint_t Function(ffi.WChar _Character);
typedef DartPutwchar = int Function(int _Character);
typedef Native_putws = ffi.Int Function(ffi.Pointer<ffi.WChar> _Buffer);
typedef Dart_putws = int Function(ffi.Pointer<ffi.WChar> _Buffer);
typedef NativeUngetwc = wint_t Function(
    wint_t _Character, ffi.Pointer<FILE> _Stream);
typedef DartUngetwc = int Function(int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_wfdopen = ffi.Pointer<FILE> Function(
    ffi.Int _FileHandle, ffi.Pointer<ffi.WChar> _Mode);
typedef Dart_wfdopen = ffi.Pointer<FILE> Function(
    int _FileHandle, ffi.Pointer<ffi.WChar> _Mode);
typedef Native_wfopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _FileName, ffi.Pointer<ffi.WChar> _Mode);
typedef Dart_wfopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _FileName, ffi.Pointer<ffi.WChar> _Mode);
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef Native_wfopen_s = errno_t Function(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode);
typedef Dart_wfopen_s = int Function(ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName, ffi.Pointer<ffi.WChar> _Mode);
typedef Native_wfreopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream);
typedef Dart_wfreopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream);
typedef Native_wfreopen_s = errno_t Function(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream);
typedef Dart_wfreopen_s = int Function(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream);
typedef Native_wfsopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Int _ShFlag);
typedef Dart_wfsopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    int _ShFlag);
typedef Native_wperror = ffi.Void Function(
    ffi.Pointer<ffi.WChar> _ErrorMessage);
typedef Dart_wperror = void Function(ffi.Pointer<ffi.WChar> _ErrorMessage);
typedef Native_wpopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _Command, ffi.Pointer<ffi.WChar> _Mode);
typedef Dart_wpopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.WChar> _Command, ffi.Pointer<ffi.WChar> _Mode);
typedef Native_wremove = ffi.Int Function(ffi.Pointer<ffi.WChar> _FileName);
typedef Dart_wremove = int Function(ffi.Pointer<ffi.WChar> _FileName);
typedef Native_wtempnam = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Directory, ffi.Pointer<ffi.WChar> _FilePrefix);
typedef Dart_wtempnam = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Directory, ffi.Pointer<ffi.WChar> _FilePrefix);
typedef Native_wtmpnam_s = errno_t Function(
    ffi.Pointer<ffi.WChar> _Buffer, ffi.Size _BufferCount);
typedef Dart_wtmpnam_s = int Function(
    ffi.Pointer<ffi.WChar> _Buffer, int _BufferCount);
typedef Native_wtmpnam = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Buffer);
typedef Dart_wtmpnam = ffi.Pointer<ffi.WChar> Function(
    ffi.Pointer<ffi.WChar> _Buffer);
typedef Native_fgetwc_nolock = wint_t Function(ffi.Pointer<FILE> _Stream);
typedef Dart_fgetwc_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fputwc_nolock = wint_t Function(
    ffi.WChar _Character, ffi.Pointer<FILE> _Stream);
typedef Dart_fputwc_nolock = int Function(
    int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_getwc_nolock = wint_t Function(ffi.Pointer<FILE> _Stream);
typedef Dart_getwc_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_putwc_nolock = wint_t Function(
    ffi.WChar _Character, ffi.Pointer<FILE> _Stream);
typedef Dart_putwc_nolock = int Function(
    int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_ungetwc_nolock = wint_t Function(
    wint_t _Character, ffi.Pointer<FILE> _Stream);
typedef Dart_ungetwc_nolock = int Function(
    int _Character, ffi.Pointer<FILE> _Stream);
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef Native__stdio_common_vfwprintf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfwprintf = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vfwprintf_s = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfwprintf_s = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vfwprintf_p = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfwprintf_p = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vfwscanf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfwscanf = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vswprintf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vswprintf = int Function(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vswprintf_s = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vswprintf_s = int Function(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vsnwprintf_s = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Size _BufferCount,
    ffi.Size _MaxCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vsnwprintf_s = int Function(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vswprintf_p = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vswprintf_p = int Function(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vswscanf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vswscanf = int Function(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native_get_stream_buffer_pointers = errno_t Function(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int>> _Count);
typedef Dart_get_stream_buffer_pointers = int Function(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int>> _Count);
typedef NativeClearerr_s = errno_t Function(ffi.Pointer<FILE> _Stream);
typedef DartClearerr_s = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeFopen_s = errno_t Function(ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName, ffi.Pointer<ffi.Char> _Mode);
typedef DartFopen_s = int Function(ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName, ffi.Pointer<ffi.Char> _Mode);
typedef NativeFread_s = ffi.Size Function(
    ffi.Pointer<ffi.Void> _Buffer,
    ffi.Size _BufferSize,
    ffi.Size _ElementSize,
    ffi.Size _ElementCount,
    ffi.Pointer<FILE> _Stream);
typedef DartFread_s = int Function(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream);
typedef NativeFreopen_s = errno_t Function(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _OldStream);
typedef DartFreopen_s = int Function(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _OldStream);
typedef rsize_t = ffi.Size;
typedef Dartrsize_t = int;
typedef NativeGets_s = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Buffer, rsize_t _Size);
typedef DartGets_s = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Buffer, int _Size);
typedef NativeTmpfile_s = errno_t Function(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream);
typedef DartTmpfile_s = int Function(ffi.Pointer<ffi.Pointer<FILE>> _Stream);
typedef NativeTmpnam_s = errno_t Function(
    ffi.Pointer<ffi.Char> _Buffer, rsize_t _Size);
typedef DartTmpnam_s = int Function(ffi.Pointer<ffi.Char> _Buffer, int _Size);
typedef NativeClearerr = ffi.Void Function(ffi.Pointer<FILE> _Stream);
typedef DartClearerr = void Function(ffi.Pointer<FILE> _Stream);
typedef NativeFclose = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartFclose = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fcloseall = ffi.Int Function();
typedef Dart_fcloseall = int Function();
typedef Native_fdopen = ffi.Pointer<FILE> Function(
    ffi.Int _FileHandle, ffi.Pointer<ffi.Char> _Mode);
typedef Dart_fdopen = ffi.Pointer<FILE> Function(
    int _FileHandle, ffi.Pointer<ffi.Char> _Mode);
typedef NativeFeof = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartFeof = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeFerror = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartFerror = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeFflush = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartFflush = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeFgetc = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartFgetc = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fgetchar = ffi.Int Function();
typedef Dart_fgetchar = int Function();
typedef fpos_t = ffi.LongLong;
typedef Dartfpos_t = int;
typedef NativeFgetpos = ffi.Int Function(
    ffi.Pointer<FILE> _Stream, ffi.Pointer<fpos_t> _Position);
typedef DartFgetpos = int Function(
    ffi.Pointer<FILE> _Stream, ffi.Pointer<fpos_t> _Position);
typedef NativeFgets = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Int _MaxCount,
    ffi.Pointer<FILE> _Stream);
typedef DartFgets = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Buffer, int _MaxCount, ffi.Pointer<FILE> _Stream);
typedef Native_fileno = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_fileno = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_flushall = ffi.Int Function();
typedef Dart_flushall = int Function();
typedef NativeFopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _FileName, ffi.Pointer<ffi.Char> _Mode);
typedef DartFopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _FileName, ffi.Pointer<ffi.Char> _Mode);
typedef NativeFputc = ffi.Int Function(
    ffi.Int _Character, ffi.Pointer<FILE> _Stream);
typedef DartFputc = int Function(int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_fputchar = ffi.Int Function(ffi.Int _Character);
typedef Dart_fputchar = int Function(int _Character);
typedef NativeFputs = ffi.Int Function(
    ffi.Pointer<ffi.Char> _Buffer, ffi.Pointer<FILE> _Stream);
typedef DartFputs = int Function(
    ffi.Pointer<ffi.Char> _Buffer, ffi.Pointer<FILE> _Stream);
typedef NativeFread = ffi.UnsignedLongLong Function(
    ffi.Pointer<ffi.Void> _Buffer,
    ffi.Size _ElementSize,
    ffi.Size _ElementCount,
    ffi.Pointer<FILE> _Stream);
typedef DartFread = int Function(ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize, int _ElementCount, ffi.Pointer<FILE> _Stream);
typedef NativeFreopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _Stream);
typedef DartFreopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _Stream);
typedef Native_fsopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Int _ShFlag);
typedef Dart_fsopen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _FileName, ffi.Pointer<ffi.Char> _Mode, int _ShFlag);
typedef NativeFsetpos = ffi.Int Function(
    ffi.Pointer<FILE> _Stream, ffi.Pointer<fpos_t> _Position);
typedef DartFsetpos = int Function(
    ffi.Pointer<FILE> _Stream, ffi.Pointer<fpos_t> _Position);
typedef NativeFseek = ffi.Int Function(
    ffi.Pointer<FILE> _Stream, ffi.Long _Offset, ffi.Int _Origin);
typedef DartFseek = int Function(
    ffi.Pointer<FILE> _Stream, int _Offset, int _Origin);
typedef Native_fseeki64 = ffi.Int Function(
    ffi.Pointer<FILE> _Stream, ffi.LongLong _Offset, ffi.Int _Origin);
typedef Dart_fseeki64 = int Function(
    ffi.Pointer<FILE> _Stream, int _Offset, int _Origin);
typedef NativeFtell = ffi.Long Function(ffi.Pointer<FILE> _Stream);
typedef DartFtell = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_ftelli64 = ffi.LongLong Function(ffi.Pointer<FILE> _Stream);
typedef Dart_ftelli64 = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeFwrite = ffi.UnsignedLongLong Function(
    ffi.Pointer<ffi.Void> _Buffer,
    ffi.Size _ElementSize,
    ffi.Size _ElementCount,
    ffi.Pointer<FILE> _Stream);
typedef DartFwrite = int Function(ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize, int _ElementCount, ffi.Pointer<FILE> _Stream);
typedef NativeGetc = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartGetc = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeGetchar = ffi.Int Function();
typedef DartGetchar = int Function();
typedef Native_getmaxstdio = ffi.Int Function();
typedef Dart_getmaxstdio = int Function();
typedef Native_getw = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_getw = int Function(ffi.Pointer<FILE> _Stream);
typedef NativePerror = ffi.Void Function(ffi.Pointer<ffi.Char> _ErrorMessage);
typedef DartPerror = void Function(ffi.Pointer<ffi.Char> _ErrorMessage);
typedef Native_pclose = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_pclose = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_popen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _Command, ffi.Pointer<ffi.Char> _Mode);
typedef Dart_popen = ffi.Pointer<FILE> Function(
    ffi.Pointer<ffi.Char> _Command, ffi.Pointer<ffi.Char> _Mode);
typedef NativePutc = ffi.Int Function(
    ffi.Int _Character, ffi.Pointer<FILE> _Stream);
typedef DartPutc = int Function(int _Character, ffi.Pointer<FILE> _Stream);
typedef NativePutchar = ffi.Int Function(ffi.Int _Character);
typedef DartPutchar = int Function(int _Character);
typedef NativePuts = ffi.Int Function(ffi.Pointer<ffi.Char> _Buffer);
typedef DartPuts = int Function(ffi.Pointer<ffi.Char> _Buffer);
typedef Native_putw = ffi.Int Function(
    ffi.Int _Word, ffi.Pointer<FILE> _Stream);
typedef Dart_putw = int Function(int _Word, ffi.Pointer<FILE> _Stream);
typedef NativeRemove = ffi.Int Function(ffi.Pointer<ffi.Char> _FileName);
typedef DartRemove = int Function(ffi.Pointer<ffi.Char> _FileName);
typedef NativeRename = ffi.Int Function(
    ffi.Pointer<ffi.Char> _OldFileName, ffi.Pointer<ffi.Char> _NewFileName);
typedef DartRename = int Function(
    ffi.Pointer<ffi.Char> _OldFileName, ffi.Pointer<ffi.Char> _NewFileName);
typedef Native_unlink = ffi.Int Function(ffi.Pointer<ffi.Char> _FileName);
typedef Dart_unlink = int Function(ffi.Pointer<ffi.Char> _FileName);
typedef NativeUnlink = ffi.Int Function(ffi.Pointer<ffi.Char> _FileName);
typedef DartUnlink = int Function(ffi.Pointer<ffi.Char> _FileName);
typedef NativeRewind = ffi.Void Function(ffi.Pointer<FILE> _Stream);
typedef DartRewind = void Function(ffi.Pointer<FILE> _Stream);
typedef Native_rmtmp = ffi.Int Function();
typedef Dart_rmtmp = int Function();
typedef NativeSetbuf = ffi.Void Function(
    ffi.Pointer<FILE> _Stream, ffi.Pointer<ffi.Char> _Buffer);
typedef DartSetbuf = void Function(
    ffi.Pointer<FILE> _Stream, ffi.Pointer<ffi.Char> _Buffer);
typedef Native_setmaxstdio = ffi.Int Function(ffi.Int _Maximum);
typedef Dart_setmaxstdio = int Function(int _Maximum);
typedef NativeSetvbuf = ffi.Int Function(ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer, ffi.Int _Mode, ffi.Size _Size);
typedef DartSetvbuf = int Function(ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer, int _Mode, int _Size);
typedef Native_tempnam = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _DirectoryName, ffi.Pointer<ffi.Char> _FilePrefix);
typedef Dart_tempnam = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _DirectoryName, ffi.Pointer<ffi.Char> _FilePrefix);
typedef NativeTmpfile = ffi.Pointer<FILE> Function();
typedef DartTmpfile = ffi.Pointer<FILE> Function();
typedef NativeTmpnam = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Buffer);
typedef DartTmpnam = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Buffer);
typedef NativeUngetc = ffi.Int Function(
    ffi.Int _Character, ffi.Pointer<FILE> _Stream);
typedef DartUngetc = int Function(int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_lock_file = ffi.Void Function(ffi.Pointer<FILE> _Stream);
typedef Dart_lock_file = void Function(ffi.Pointer<FILE> _Stream);
typedef Native_unlock_file = ffi.Void Function(ffi.Pointer<FILE> _Stream);
typedef Dart_unlock_file = void Function(ffi.Pointer<FILE> _Stream);
typedef Native_fclose_nolock = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_fclose_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fflush_nolock = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_fflush_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fgetc_nolock = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_fgetc_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fputc_nolock = ffi.Int Function(
    ffi.Int _Character, ffi.Pointer<FILE> _Stream);
typedef Dart_fputc_nolock = int Function(
    int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_fread_nolock = ffi.Size Function(ffi.Pointer<ffi.Void> _Buffer,
    ffi.Size _ElementSize, ffi.Size _ElementCount, ffi.Pointer<FILE> _Stream);
typedef Dart_fread_nolock = int Function(ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize, int _ElementCount, ffi.Pointer<FILE> _Stream);
typedef Native_fread_nolock_s = ffi.Size Function(
    ffi.Pointer<ffi.Void> _Buffer,
    ffi.Size _BufferSize,
    ffi.Size _ElementSize,
    ffi.Size _ElementCount,
    ffi.Pointer<FILE> _Stream);
typedef Dart_fread_nolock_s = int Function(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream);
typedef Native_fseek_nolock = ffi.Int Function(
    ffi.Pointer<FILE> _Stream, ffi.Long _Offset, ffi.Int _Origin);
typedef Dart_fseek_nolock = int Function(
    ffi.Pointer<FILE> _Stream, int _Offset, int _Origin);
typedef Native_fseeki64_nolock = ffi.Int Function(
    ffi.Pointer<FILE> _Stream, ffi.LongLong _Offset, ffi.Int _Origin);
typedef Dart_fseeki64_nolock = int Function(
    ffi.Pointer<FILE> _Stream, int _Offset, int _Origin);
typedef Native_ftell_nolock = ffi.Long Function(ffi.Pointer<FILE> _Stream);
typedef Dart_ftell_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_ftelli64_nolock = ffi.LongLong Function(
    ffi.Pointer<FILE> _Stream);
typedef Dart_ftelli64_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_fwrite_nolock = ffi.Size Function(ffi.Pointer<ffi.Void> _Buffer,
    ffi.Size _ElementSize, ffi.Size _ElementCount, ffi.Pointer<FILE> _Stream);
typedef Dart_fwrite_nolock = int Function(ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize, int _ElementCount, ffi.Pointer<FILE> _Stream);
typedef Native_getc_nolock = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef Dart_getc_nolock = int Function(ffi.Pointer<FILE> _Stream);
typedef Native_putc_nolock = ffi.Int Function(
    ffi.Int _Character, ffi.Pointer<FILE> _Stream);
typedef Dart_putc_nolock = int Function(
    int _Character, ffi.Pointer<FILE> _Stream);
typedef Native_ungetc_nolock = ffi.Int Function(
    ffi.Int _Character, ffi.Pointer<FILE> _Stream);
typedef Dart_ungetc_nolock = int Function(
    int _Character, ffi.Pointer<FILE> _Stream);
typedef Native__p__commode = ffi.Pointer<ffi.Int> Function();
typedef Dart__p__commode = ffi.Pointer<ffi.Int> Function();
typedef Native__stdio_common_vfprintf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfprintf = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vfprintf_s = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfprintf_s = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vfprintf_p = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vfprintf_p = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native_set_printf_count_output = ffi.Int Function(ffi.Int _Value);
typedef Dart_set_printf_count_output = int Function(int _Value);
typedef Native_get_printf_count_output = ffi.Int Function();
typedef Dart_get_printf_count_output = int Function();
typedef Native__stdio_common_vfscanf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _Arglist);
typedef Dart__stdio_common_vfscanf = int Function(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _Arglist);
typedef Native__stdio_common_vsprintf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vsprintf = int Function(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vsprintf_s = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vsprintf_s = int Function(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vsnprintf_s = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Size _BufferCount,
    ffi.Size _MaxCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vsnprintf_s = int Function(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vsprintf_p = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vsprintf_p = int Function(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Native__stdio_common_vsscanf = ffi.Int Function(
    ffi.UnsignedLongLong _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Size _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef Dart__stdio_common_vsscanf = int Function(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList);
typedef NativeTempnam = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Directory, ffi.Pointer<ffi.Char> _FilePrefix);
typedef DartTempnam = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> _Directory, ffi.Pointer<ffi.Char> _FilePrefix);
typedef NativeFcloseall = ffi.Int Function();
typedef DartFcloseall = int Function();
typedef NativeFdopen = ffi.Pointer<FILE> Function(
    ffi.Int _FileHandle, ffi.Pointer<ffi.Char> _Format);
typedef DartFdopen = ffi.Pointer<FILE> Function(
    int _FileHandle, ffi.Pointer<ffi.Char> _Format);
typedef NativeFgetchar = ffi.Int Function();
typedef DartFgetchar = int Function();
typedef NativeFileno = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartFileno = int Function(ffi.Pointer<FILE> _Stream);
typedef NativeFlushall = ffi.Int Function();
typedef DartFlushall = int Function();
typedef NativeFputchar = ffi.Int Function(ffi.Int _Ch);
typedef DartFputchar = int Function(int _Ch);
typedef NativeGetw = ffi.Int Function(ffi.Pointer<FILE> _Stream);
typedef DartGetw = int Function(ffi.Pointer<FILE> _Stream);
typedef NativePutw = ffi.Int Function(ffi.Int _Ch, ffi.Pointer<FILE> _Stream);
typedef DartPutw = int Function(int _Ch, ffi.Pointer<FILE> _Stream);
typedef NativeRmtmp = ffi.Int Function();
typedef DartRmtmp = int Function();

final class ov_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void> ptr, ffi.Size size,
              ffi.Size nmemb, ffi.Pointer<ffi.Void> datasource)>> read_func;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void> datasource, ffi.Int offset,
              ffi.Int whence)>> seek_func;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> datasource)>>
      close_func;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Void> datasource)>>
      tell_func;
}

typedef Native_ov_header_fseek_wrap = ffi.Int Function(
    ffi.Pointer<FILE> f, ffi.Int off, ffi.Int whence);
typedef Dart_ov_header_fseek_wrap = int Function(
    ffi.Pointer<FILE> f, int off, int whence);

final class OggVorbis_File extends ffi.Struct {
  external ffi.Pointer<ffi.Void> datasource;

  @ffi.Int()
  external int seekable;

  @ffi.Int()
  external int offset;

  @ffi.Int()
  external int end;

  @ffi.Int()
  external int oy;

  @ffi.Int()
  external int links;

  external ffi.Pointer<ffi.Int> offsets;

  external ffi.Pointer<ffi.Int> dataoffsets;

  external ffi.Pointer<ffi.Long> serialnos;

  external ffi.Pointer<ffi.Int> pcmlengths;

  external ffi.Pointer<vorbis_info> vi;

  external ffi.Pointer<vorbis_comment> vc;

  @ffi.Int()
  external int pcm_offset;

  @ffi.Int()
  external int ready_state;

  @ffi.Long()
  external int current_serialno;

  @ffi.Int()
  external int current_link;

  @ffi.Double()
  external double bittrack;

  @ffi.Double()
  external double samptrack;

  @ffi.Int()
  external int os;

  external vorbis_dsp_state vd;

  external vorbis_block vb;

  external ov_callbacks callbacks;
}

typedef NativeOv_clear = ffi.Int Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_clear = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_fopen = ffi.Int Function(
    ffi.Pointer<ffi.Char> path, ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_fopen = int Function(
    ffi.Pointer<ffi.Char> path, ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_open = ffi.Int Function(
    ffi.Pointer<FILE> f,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    ffi.Long ibytes);
typedef DartOv_open = int Function(ffi.Pointer<FILE> f,
    ffi.Pointer<OggVorbis_File> vf, ffi.Pointer<ffi.Char> initial, int ibytes);
typedef NativeOv_open_callbacks = ffi.Int Function(
    ffi.Pointer<ffi.Void> datasource,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    ffi.Long ibytes,
    ov_callbacks callbacks);
typedef DartOv_open_callbacks = int Function(
    ffi.Pointer<ffi.Void> datasource,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    int ibytes,
    ov_callbacks callbacks);
typedef NativeOv_test = ffi.Int Function(
    ffi.Pointer<FILE> f,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    ffi.Long ibytes);
typedef DartOv_test = int Function(ffi.Pointer<FILE> f,
    ffi.Pointer<OggVorbis_File> vf, ffi.Pointer<ffi.Char> initial, int ibytes);
typedef NativeOv_test_callbacks = ffi.Int Function(
    ffi.Pointer<ffi.Void> datasource,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    ffi.Long ibytes,
    ov_callbacks callbacks);
typedef DartOv_test_callbacks = int Function(
    ffi.Pointer<ffi.Void> datasource,
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> initial,
    int ibytes,
    ov_callbacks callbacks);
typedef NativeOv_test_open = ffi.Int Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_test_open = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_bitrate = ffi.Long Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int i);
typedef DartOv_bitrate = int Function(ffi.Pointer<OggVorbis_File> vf, int i);
typedef NativeOv_bitrate_instant = ffi.Long Function(
    ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_bitrate_instant = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_streams = ffi.Long Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_streams = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_seekable = ffi.Long Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_seekable = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_serialnumber = ffi.Long Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int i);
typedef DartOv_serialnumber = int Function(
    ffi.Pointer<OggVorbis_File> vf, int i);
typedef NativeOv_raw_total = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int i);
typedef DartOv_raw_total = int Function(ffi.Pointer<OggVorbis_File> vf, int i);
typedef NativeOv_pcm_total = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int i);
typedef DartOv_pcm_total = int Function(ffi.Pointer<OggVorbis_File> vf, int i);
typedef NativeOv_time_total = ffi.Double Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int i);
typedef DartOv_time_total = double Function(
    ffi.Pointer<OggVorbis_File> vf, int i);
typedef NativeOv_raw_seek = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int pos);
typedef DartOv_raw_seek = int Function(ffi.Pointer<OggVorbis_File> vf, int pos);
typedef NativeOv_pcm_seek = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int pos);
typedef DartOv_pcm_seek = int Function(ffi.Pointer<OggVorbis_File> vf, int pos);
typedef NativeOv_pcm_seek_page = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int pos);
typedef DartOv_pcm_seek_page = int Function(
    ffi.Pointer<OggVorbis_File> vf, int pos);
typedef NativeOv_time_seek = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Double pos);
typedef DartOv_time_seek = int Function(
    ffi.Pointer<OggVorbis_File> vf, double pos);
typedef NativeOv_time_seek_page = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Double pos);
typedef DartOv_time_seek_page = int Function(
    ffi.Pointer<OggVorbis_File> vf, double pos);
typedef NativeOv_raw_seek_lap = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int pos);
typedef DartOv_raw_seek_lap = int Function(
    ffi.Pointer<OggVorbis_File> vf, int pos);
typedef NativeOv_pcm_seek_lap = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int pos);
typedef DartOv_pcm_seek_lap = int Function(
    ffi.Pointer<OggVorbis_File> vf, int pos);
typedef NativeOv_pcm_seek_page_lap = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int pos);
typedef DartOv_pcm_seek_page_lap = int Function(
    ffi.Pointer<OggVorbis_File> vf, int pos);
typedef NativeOv_time_seek_lap = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Double pos);
typedef DartOv_time_seek_lap = int Function(
    ffi.Pointer<OggVorbis_File> vf, double pos);
typedef NativeOv_time_seek_page_lap = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Double pos);
typedef DartOv_time_seek_page_lap = int Function(
    ffi.Pointer<OggVorbis_File> vf, double pos);
typedef NativeOv_raw_tell = ffi.Int Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_raw_tell = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_pcm_tell = ffi.Int Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_pcm_tell = int Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_time_tell = ffi.Double Function(
    ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_time_tell = double Function(ffi.Pointer<OggVorbis_File> vf);
typedef NativeOv_info = ffi.Pointer<vorbis_info> Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int link);
typedef DartOv_info = ffi.Pointer<vorbis_info> Function(
    ffi.Pointer<OggVorbis_File> vf, int link);
typedef NativeOv_comment = ffi.Pointer<vorbis_comment> Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int link);
typedef DartOv_comment = ffi.Pointer<vorbis_comment> Function(
    ffi.Pointer<OggVorbis_File> vf, int link);
typedef NativeOv_read_float = ffi.Long Function(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm_channels,
    ffi.Int samples,
    ffi.Pointer<ffi.Int> bitstream);
typedef DartOv_read_float = int Function(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Float>>> pcm_channels,
    int samples,
    ffi.Pointer<ffi.Int> bitstream);
typedef NativeOv_read_filter = ffi.Long Function(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> buffer,
    ffi.Int length,
    ffi.Int bigendianp,
    ffi.Int word,
    ffi.Int sgned,
    ffi.Pointer<ffi.Int> bitstream,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Pointer<ffi.Float>> pcm,
                    ffi.Long channels,
                    ffi.Long samples,
                    ffi.Pointer<ffi.Void> filter_param)>>
        filter,
    ffi.Pointer<ffi.Void> filter_param);
typedef DartOv_read_filter = int Function(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> buffer,
    int length,
    int bigendianp,
    int word,
    int sgned,
    ffi.Pointer<ffi.Int> bitstream,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Pointer<ffi.Float>> pcm,
                    ffi.Long channels,
                    ffi.Long samples,
                    ffi.Pointer<ffi.Void> filter_param)>>
        filter,
    ffi.Pointer<ffi.Void> filter_param);
typedef NativeOv_read = ffi.Long Function(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> buffer,
    ffi.Int length,
    ffi.Int bigendianp,
    ffi.Int word,
    ffi.Int sgned,
    ffi.Pointer<ffi.Int> bitstream);
typedef DartOv_read = int Function(
    ffi.Pointer<OggVorbis_File> vf,
    ffi.Pointer<ffi.Char> buffer,
    int length,
    int bigendianp,
    int word,
    int sgned,
    ffi.Pointer<ffi.Int> bitstream);
typedef NativeOv_crosslap = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf1, ffi.Pointer<OggVorbis_File> vf2);
typedef DartOv_crosslap = int Function(
    ffi.Pointer<OggVorbis_File> vf1, ffi.Pointer<OggVorbis_File> vf2);
typedef NativeOv_halfrate = ffi.Int Function(
    ffi.Pointer<OggVorbis_File> vf, ffi.Int flag);
typedef DartOv_halfrate = int Function(
    ffi.Pointer<OggVorbis_File> vf, int flag);
typedef NativeOv_halfrate_p = ffi.Int Function(ffi.Pointer<OggVorbis_File> vf);
typedef DartOv_halfrate_p = int Function(ffi.Pointer<OggVorbis_File> vf);

const int OV_FALSE = -1;

const int OV_EOF = -2;

const int OV_HOLE = -3;

const int OV_EREAD = -128;

const int OV_EFAULT = -129;

const int OV_EIMPL = -130;

const int OV_EINVAL = -131;

const int OV_ENOTVORBIS = -132;

const int OV_EBADHEADER = -133;

const int OV_EVERSION = -134;

const int OV_ENOTAUDIO = -135;

const int OV_EBADPACKET = -136;

const int OV_EBADLINK = -137;

const int OV_ENOSEEK = -138;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const int NOTOPEN = 0;

const int PARTOPEN = 1;

const int OPENED = 2;

const int STREAMSET = 3;

const int INITSET = 4;
